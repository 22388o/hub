// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hubrpc.proto

/*
Package hubrpc is a generated protocol buffer package.

It is generated from these files:
	hubrpc.proto

It has these top-level messages:
	EmptyRequest
	EmptyResponse
	CheckNodeStatsRequest
	CheckNodeStatsResponse
	CreateInvoiceRequest
	CreateInvoiceResponse
	BalanceRequest
	Balance
	ValidateInvoiceResponse
	Invoice
	BalanceResponse
	ValidateInvoiceRequest
	EstimateFeeRequest
	EstimateFeeResponse
	SendPaymentRequest
	PaymentByIDRequest
	PaymentByInvoiceRequest
	ListPaymentsRequest
	ListPaymentsResponse
	NodeIdentificator
	Payment
*/
package hubrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Media is a list of possible media types. Media is a type of technology which
// is used to transport value of underlying asset.
type Media int32

const (
	Media_MEDIA_NONE Media = 0
	//
	// BLOCKCHAIN means that blockchain direct used for making the payments.
	Media_BLOCKCHAIN Media = 1
	//
	// LIGHTNING means that second layer on top of the blockchain is used for
	// making the payments.
	Media_LIGHTNING Media = 2
)

var Media_name = map[int32]string{
	0: "MEDIA_NONE",
	1: "BLOCKCHAIN",
	2: "LIGHTNING",
}
var Media_value = map[string]int32{
	"MEDIA_NONE": 0,
	"BLOCKCHAIN": 1,
	"LIGHTNING":  2,
}

func (x Media) String() string {
	return proto.EnumName(Media_name, int32(x))
}
func (Media) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// PaymentStatus denotes the stage of the processing the payment.
type PaymentStatus int32

const (
	PaymentStatus_STATUS_NONE PaymentStatus = 0
	//
	// WAITING means that payment has been created and waiting to be approved
	// for sending.
	PaymentStatus_WAITING PaymentStatus = 1
	//
	// PENDING means that service is seeing the payment, but it not yet approved
	// from the its POV.
	PaymentStatus_PENDING PaymentStatus = 2
	//
	// COMPLETED in case of outgoing/incoming payment this means that we
	// sent/received the transaction in/from the network and it was confirmed
	// number of times service believe sufficient. In case of the forward
	// transaction it means that we succesfully routed it through and
	// earned fee for that.
	PaymentStatus_COMPLETED PaymentStatus = 3
	//
	// FAILED means that services has tryied to send payment for couple of
	// times, but without success, and now service gave up.
	PaymentStatus_FAILED PaymentStatus = 4
)

var PaymentStatus_name = map[int32]string{
	0: "STATUS_NONE",
	1: "WAITING",
	2: "PENDING",
	3: "COMPLETED",
	4: "FAILED",
}
var PaymentStatus_value = map[string]int32{
	"STATUS_NONE": 0,
	"WAITING":     1,
	"PENDING":     2,
	"COMPLETED":   3,
	"FAILED":      4,
}

func (x PaymentStatus) String() string {
	return proto.EnumName(PaymentStatus_name, int32(x))
}
func (PaymentStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// PaymentDirection denotes the direction of the payment, whether payment is
// 	going form us to someone else, or form someone else to us.
type PaymentDirection int32

const (
	PaymentDirection_DIRECTION_NONE PaymentDirection = 0
	//
	// INCOMING type of payment which service has received from someone else
	// in the media.
	PaymentDirection_INCOMING PaymentDirection = 1
	//
	// OUTGOING type of payment which service has sent to someone else in the
	// media.
	PaymentDirection_OUTGOING PaymentDirection = 2
)

var PaymentDirection_name = map[int32]string{
	0: "DIRECTION_NONE",
	1: "INCOMING",
	2: "OUTGOING",
}
var PaymentDirection_value = map[string]int32{
	"DIRECTION_NONE": 0,
	"INCOMING":       1,
	"OUTGOING":       2,
}

func (x PaymentDirection) String() string {
	return proto.EnumName(PaymentDirection_name, int32(x))
}
func (PaymentDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// PaymentSystemSystem denotes is that payment belongs to business logic of
// payment server or it was originated by user / third-party service.
type PaymentSystem int32

const (
	PaymentSystem_SYSTEM_NONE PaymentSystem = 0
	//
	// INTERNAL type of payment usually services the purpose of payment
	// server itself for stabilisation of system.
	PaymentSystem_INTERNAL PaymentSystem = 1
	//
	// EXTERNAL type of payment which was originated by user / third-party
	// services, this is what usually interesting for external viewer. This
	// type of payment changes balance.
	PaymentSystem_EXTERNAL PaymentSystem = 2
)

var PaymentSystem_name = map[int32]string{
	0: "SYSTEM_NONE",
	1: "INTERNAL",
	2: "EXTERNAL",
}
var PaymentSystem_value = map[string]int32{
	"SYSTEM_NONE": 0,
	"INTERNAL":    1,
	"EXTERNAL":    2,
}

func (x PaymentSystem) String() string {
	return proto.EnumName(PaymentSystem_name, int32(x))
}
func (PaymentSystem) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SortType int32

const (
	SortType_SORT_NONE SortType = 0
	//
	// BySentNum is used to sort nodes by number of payment we have sent to
	// this node.
	SortType_BY_SENT_NUM SortType = 1
	//
	// ByIdleness is used to sort nodes by capacity / volume ration, i.e. if
	// we have a lot of funds locked with node, but don't have activity node
	// will be ranked as idle.
	SortType_BY_IDLENESS SortType = 2
	//
	// ByVolume is used to sort nodes by overall volume including forward
	// volume.
	SortType_BY_VOLUME SortType = 3
)

var SortType_name = map[int32]string{
	0: "SORT_NONE",
	1: "BY_SENT_NUM",
	2: "BY_IDLENESS",
	3: "BY_VOLUME",
}
var SortType_value = map[string]int32{
	"SORT_NONE":   0,
	"BY_SENT_NUM": 1,
	"BY_IDLENESS": 2,
	"BY_VOLUME":   3,
}

func (x SortType) String() string {
	return proto.EnumName(SortType_name, int32(x))
}
func (SortType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Period int32

const (
	Period_PERIOD_NONE Period = 0
	//
	// Day is used to aggregate statistic over one day period.
	Period_DAY Period = 1
	//
	// Week is used to aggregate statistic over one week period.
	Period_WEEK Period = 2
	//
	// Month is used to aggregate statistic over one month period.
	Period_MONTH Period = 3
	//
	// ThreeMonth is used to aggregate statistic over three month period.
	Period_THREE_MONTH Period = 4
)

var Period_name = map[int32]string{
	0: "PERIOD_NONE",
	1: "DAY",
	2: "WEEK",
	3: "MONTH",
	4: "THREE_MONTH",
}
var Period_value = map[string]int32{
	"PERIOD_NONE": 0,
	"DAY":         1,
	"WEEK":        2,
	"MONTH":       3,
	"THREE_MONTH": 4,
}

func (x Period) String() string {
	return proto.EnumName(Period_name, int32(x))
}
func (Period) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CheckNodeStatsRequest struct {
	Period   Period   `protobuf:"varint,1,opt,name=period,enum=hubrpc.Period" json:"period,omitempty"`
	Node     string   `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Limit    int32    `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	SortType SortType `protobuf:"varint,4,opt,name=sort_type,json=sortType,enum=hubrpc.SortType" json:"sort_type,omitempty"`
}

func (m *CheckNodeStatsRequest) Reset()                    { *m = CheckNodeStatsRequest{} }
func (m *CheckNodeStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckNodeStatsRequest) ProtoMessage()               {}
func (*CheckNodeStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CheckNodeStatsRequest) GetPeriod() Period {
	if m != nil {
		return m.Period
	}
	return Period_PERIOD_NONE
}

func (m *CheckNodeStatsRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *CheckNodeStatsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CheckNodeStatsRequest) GetSortType() SortType {
	if m != nil {
		return m.SortType
	}
	return SortType_SORT_NONE
}

type CheckNodeStatsResponse struct {
	Statuses []*CheckNodeStatsResponse_NodeStatus `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty"`
}

func (m *CheckNodeStatsResponse) Reset()                    { *m = CheckNodeStatsResponse{} }
func (m *CheckNodeStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckNodeStatsResponse) ProtoMessage()               {}
func (*CheckNodeStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CheckNodeStatsResponse) GetStatuses() []*CheckNodeStatsResponse_NodeStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type CheckNodeStatsResponse_NodeStatus struct {
	// Domain is the name given by us to this node.
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// PubKey is a identificator of node in lightning network.
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey" json:"pub_key,omitempty"`
	// Available shows whether or not we could send payment directly to
	// the node.
	Available bool `protobuf:"varint,3,opt,name=available" json:"available,omitempty"`
	// Anomalies will show message about anomalies which are related to
	// this node, such as not all funds being active, or node being
	// offline, or not enough funds being locked within channels, and
	// other.
	Anomalies    []string                                         `protobuf:"bytes,4,rep,name=anomalies" json:"anomalies,omitempty"`
	RankStats    *CheckNodeStatsResponse_NodeStatus_RankStats     `protobuf:"bytes,5,opt,name=rank_stats,json=rankStats" json:"rank_stats,omitempty"`
	PaymentStats *CheckNodeStatsResponse_NodeStatus_PaymentsStats `protobuf:"bytes,6,opt,name=payment_stats,json=paymentStats" json:"payment_stats,omitempty"`
	ChannelStats *CheckNodeStatsResponse_NodeStatus_ChannelStats  `protobuf:"bytes,7,opt,name=channel_stats,json=channelStats" json:"channel_stats,omitempty"`
}

func (m *CheckNodeStatsResponse_NodeStatus) Reset()         { *m = CheckNodeStatsResponse_NodeStatus{} }
func (m *CheckNodeStatsResponse_NodeStatus) String() string { return proto.CompactTextString(m) }
func (*CheckNodeStatsResponse_NodeStatus) ProtoMessage()    {}
func (*CheckNodeStatsResponse_NodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

func (m *CheckNodeStatsResponse_NodeStatus) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CheckNodeStatsResponse_NodeStatus) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *CheckNodeStatsResponse_NodeStatus) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *CheckNodeStatsResponse_NodeStatus) GetAnomalies() []string {
	if m != nil {
		return m.Anomalies
	}
	return nil
}

func (m *CheckNodeStatsResponse_NodeStatus) GetRankStats() *CheckNodeStatsResponse_NodeStatus_RankStats {
	if m != nil {
		return m.RankStats
	}
	return nil
}

func (m *CheckNodeStatsResponse_NodeStatus) GetPaymentStats() *CheckNodeStatsResponse_NodeStatus_PaymentsStats {
	if m != nil {
		return m.PaymentStats
	}
	return nil
}

func (m *CheckNodeStatsResponse_NodeStatus) GetChannelStats() *CheckNodeStatsResponse_NodeStatus_ChannelStats {
	if m != nil {
		return m.ChannelStats
	}
	return nil
}

type CheckNodeStatsResponse_NodeStatus_ChannelStats struct {
	// LockedLocallyActive is number of funds aggregated from all channels,
	// which could be used for send the payments. (In USD)
	LockedLocallyActive float64 `protobuf:"fixed64,1,opt,name=locked_locally_active,json=lockedLocallyActive" json:"locked_locally_active,omitempty"`
	// LockedRemotelyActive is number of funds aggregated from all channels,
	// which could be used for receiving the payments. (In USD)
	LockedRemotelyActive float64 `protobuf:"fixed64,2,opt,name=locked_remotely_active,json=lockedRemotelyActive" json:"locked_remotely_active,omitempty"`
	// LockedLocallyOverall is number of funds aggregated from all channels,
	// which are locked on local side. This number include pending, as well
	// as active funds. (In USD)
	LockedLocallyOverall float64 `protobuf:"fixed64,3,opt,name=locked_locally_overall,json=lockedLocallyOverall" json:"locked_locally_overall,omitempty"`
	// LockedRemotelyOverall is number of funds aggregated from all channels,
	// which are locked on remote side. This number include pending, as well
	// as active funds. (In USD)
	LockedRemotelyOverall float64 `protobuf:"fixed64,4,opt,name=locked_remotely_overall,json=lockedRemotelyOverall" json:"locked_remotely_overall,omitempty"`
}

func (m *CheckNodeStatsResponse_NodeStatus_ChannelStats) Reset() {
	*m = CheckNodeStatsResponse_NodeStatus_ChannelStats{}
}
func (m *CheckNodeStatsResponse_NodeStatus_ChannelStats) String() string {
	return proto.CompactTextString(m)
}
func (*CheckNodeStatsResponse_NodeStatus_ChannelStats) ProtoMessage() {}
func (*CheckNodeStatsResponse_NodeStatus_ChannelStats) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0, 0}
}

func (m *CheckNodeStatsResponse_NodeStatus_ChannelStats) GetLockedLocallyActive() float64 {
	if m != nil {
		return m.LockedLocallyActive
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_ChannelStats) GetLockedRemotelyActive() float64 {
	if m != nil {
		return m.LockedRemotelyActive
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_ChannelStats) GetLockedLocallyOverall() float64 {
	if m != nil {
		return m.LockedLocallyOverall
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_ChannelStats) GetLockedRemotelyOverall() float64 {
	if m != nil {
		return m.LockedRemotelyOverall
	}
	return 0
}

type CheckNodeStatsResponse_NodeStatus_PaymentsStats struct {
	// AverageSentForwardSat is the number of funds which were sent
	// to this node generated by forwarding activity in the network. (In USD)
	//
	// NOTE: This metric will be non-zero if we have direct channel with node.
	AverageSentForward float64 `protobuf:"fixed64,1,opt,name=average_sent_forward,json=averageSentForward" json:"average_sent_forward,omitempty"`
	// AverageReceivedForwardSat is the number of funds which were received
	// from this node generated by forwarding activity in the network. (In USD)
	//
	// NOTE: This metric will be non-zero if we have direct channel with node.
	AverageReceivedForward float64 `protobuf:"fixed64,2,opt,name=average_received_forward,json=averageReceivedForward" json:"average_received_forward,omitempty"`
	// AverageSent is the number of funds which were sens from
	// us to remote node, calculated over given period of time.
	// For example: average sent funds during the day, calculated over
	// week period. (In USD)
	AverageSent            float64 `protobuf:"fixed64,3,opt,name=average_sent,json=averageSent" json:"average_sent,omitempty"`
	OverallSentForward     float64 `protobuf:"fixed64,4,opt,name=overall_sent_forward,json=overallSentForward" json:"overall_sent_forward,omitempty"`
	OverallReceivedForward float64 `protobuf:"fixed64,5,opt,name=overall_received_forward,json=overallReceivedForward" json:"overall_received_forward,omitempty"`
	OverallSent            float64 `protobuf:"fixed64,6,opt,name=overall_sent,json=overallSent" json:"overall_sent,omitempty"`
	NumSent                int32   `protobuf:"varint,7,opt,name=num_sent,json=numSent" json:"num_sent,omitempty"`
	NumReceivedForward     int32   `protobuf:"varint,8,opt,name=num_received_forward,json=numReceivedForward" json:"num_received_forward,omitempty"`
	NumSentForward         int32   `protobuf:"varint,9,opt,name=num_sent_forward,json=numSentForward" json:"num_sent_forward,omitempty"`
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) Reset() {
	*m = CheckNodeStatsResponse_NodeStatus_PaymentsStats{}
}
func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) String() string {
	return proto.CompactTextString(m)
}
func (*CheckNodeStatsResponse_NodeStatus_PaymentsStats) ProtoMessage() {}
func (*CheckNodeStatsResponse_NodeStatus_PaymentsStats) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0, 1}
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetAverageSentForward() float64 {
	if m != nil {
		return m.AverageSentForward
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetAverageReceivedForward() float64 {
	if m != nil {
		return m.AverageReceivedForward
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetAverageSent() float64 {
	if m != nil {
		return m.AverageSent
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetOverallSentForward() float64 {
	if m != nil {
		return m.OverallSentForward
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetOverallReceivedForward() float64 {
	if m != nil {
		return m.OverallReceivedForward
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetOverallSent() float64 {
	if m != nil {
		return m.OverallSent
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetNumSent() int32 {
	if m != nil {
		return m.NumSent
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetNumReceivedForward() int32 {
	if m != nil {
		return m.NumReceivedForward
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_PaymentsStats) GetNumSentForward() int32 {
	if m != nil {
		return m.NumSentForward
	}
	return 0
}

type CheckNodeStatsResponse_NodeStatus_RankStats struct {
	RankPaymentsSentNum    int64 `protobuf:"varint,1,opt,name=rank_payments_sent_num,json=rankPaymentsSentNum" json:"rank_payments_sent_num,omitempty"`
	RankPaymentsSentVolume int64 `protobuf:"varint,2,opt,name=rank_payments_sent_volume,json=rankPaymentsSentVolume" json:"rank_payments_sent_volume,omitempty"`
	RankIdle               int64 `protobuf:"varint,3,opt,name=rank_idle,json=rankIdle" json:"rank_idle,omitempty"`
	RankForwardActivity    int64 `protobuf:"varint,4,opt,name=rank_forward_activity,json=rankForwardActivity" json:"rank_forward_activity,omitempty"`
}

func (m *CheckNodeStatsResponse_NodeStatus_RankStats) Reset() {
	*m = CheckNodeStatsResponse_NodeStatus_RankStats{}
}
func (m *CheckNodeStatsResponse_NodeStatus_RankStats) String() string {
	return proto.CompactTextString(m)
}
func (*CheckNodeStatsResponse_NodeStatus_RankStats) ProtoMessage() {}
func (*CheckNodeStatsResponse_NodeStatus_RankStats) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0, 2}
}

func (m *CheckNodeStatsResponse_NodeStatus_RankStats) GetRankPaymentsSentNum() int64 {
	if m != nil {
		return m.RankPaymentsSentNum
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_RankStats) GetRankPaymentsSentVolume() int64 {
	if m != nil {
		return m.RankPaymentsSentVolume
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_RankStats) GetRankIdle() int64 {
	if m != nil {
		return m.RankIdle
	}
	return 0
}

func (m *CheckNodeStatsResponse_NodeStatus_RankStats) GetRankForwardActivity() int64 {
	if m != nil {
		return m.RankForwardActivity
	}
	return 0
}

type CreateInvoiceRequest struct {
	//
	// (optional) Amount is the amount which should be received on this
	// receipt, in bitcoin.
	Amount string `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	//
	// (optional) Description description will be placed in the invoice itself,
	// which would allow user to see what he paid for later in the wallet.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *CreateInvoiceRequest) Reset()                    { *m = CreateInvoiceRequest{} }
func (m *CreateInvoiceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateInvoiceRequest) ProtoMessage()               {}
func (*CreateInvoiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateInvoiceRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *CreateInvoiceRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateInvoiceResponse struct {
	//
	// When this invoice was created.
	// NOTE: Only returns for lightning network media.
	CreationDate int64 `protobuf:"varint,1,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
	//
	// Invoice it is lightning network invoice, which is the string which
	// contains amount, description, destination, and other info which is
	// needed for sender to successfully send payment.
	Invoice string `protobuf:"bytes,2,opt,name=invoice" json:"invoice,omitempty"`
	//
	// Invoice expiry time in seconds. Default is 3600 (1 hour).
	// NOTE: Only returns for lightning network media.
	Expiry int64 `protobuf:"varint,3,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *CreateInvoiceResponse) Reset()                    { *m = CreateInvoiceResponse{} }
func (m *CreateInvoiceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateInvoiceResponse) ProtoMessage()               {}
func (*CreateInvoiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateInvoiceResponse) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

func (m *CreateInvoiceResponse) GetInvoice() string {
	if m != nil {
		return m.Invoice
	}
	return ""
}

func (m *CreateInvoiceResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type BalanceRequest struct {
}

func (m *BalanceRequest) Reset()                    { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()               {}
func (*BalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Balance struct {
	//
	// Available is the number of funds which could be used by this account
	// to send funds to someone else.
	Available string `protobuf:"bytes,1,opt,name=available" json:"available,omitempty"`
	//
	// Pending funds in pending payment channels.
	Pending string `protobuf:"bytes,2,opt,name=pending" json:"pending,omitempty"`
}

func (m *Balance) Reset()                    { *m = Balance{} }
func (m *Balance) String() string            { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()               {}
func (*Balance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Balance) GetAvailable() string {
	if m != nil {
		return m.Available
	}
	return ""
}

func (m *Balance) GetPending() string {
	if m != nil {
		return m.Pending
	}
	return ""
}

type ValidateInvoiceResponse struct {
	//
	// Invoice it is lightning network invoice, which is the string which
	// contains amount, description, destination, and other info which is
	// needed for sender to successfully send payment.
	Invoice *Invoice `protobuf:"bytes,1,opt,name=invoice" json:"invoice,omitempty"`
}

func (m *ValidateInvoiceResponse) Reset()                    { *m = ValidateInvoiceResponse{} }
func (m *ValidateInvoiceResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateInvoiceResponse) ProtoMessage()               {}
func (*ValidateInvoiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ValidateInvoiceResponse) GetInvoice() *Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

type Invoice struct {
	//
	// An optional memo to attach along with the invoice. Used for record keeping
	// purposes for the invoice's creator, and will also be set in the
	// description field of the encoded payment request if the
	// description_hash field is not being used.
	Memo string `protobuf:"bytes,1,opt,name=memo" json:"memo,omitempty"`
	//
	// The value of this invoice in bitcoins.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	//
	// When this invoice was created.
	CreationDate int64 `protobuf:"varint,3,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
	//
	// Invoice expiry time in seconds. Default is 3600 (1 hour).
	Expiry int64 `protobuf:"varint,4,opt,name=expiry" json:"expiry,omitempty"`
	//
	// Fallback on-chain address in case of lightning network payment fail.
	FallbackAddr string `protobuf:"bytes,5,opt,name=fallback_addr,json=fallbackAddr" json:"fallback_addr,omitempty"`
	//
	// Lightning Network public key of receiving node.
	Destination string `protobuf:"bytes,6,opt,name=destination" json:"destination,omitempty"`
}

func (m *Invoice) Reset()                    { *m = Invoice{} }
func (m *Invoice) String() string            { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()               {}
func (*Invoice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Invoice) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Invoice) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Invoice) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

func (m *Invoice) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Invoice) GetFallbackAddr() string {
	if m != nil {
		return m.FallbackAddr
	}
	return ""
}

func (m *Invoice) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type BalanceResponse struct {
	Balances []*Balance `protobuf:"bytes,1,rep,name=balances" json:"balances,omitempty"`
}

func (m *BalanceResponse) Reset()                    { *m = BalanceResponse{} }
func (m *BalanceResponse) String() string            { return proto.CompactTextString(m) }
func (*BalanceResponse) ProtoMessage()               {}
func (*BalanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BalanceResponse) GetBalances() []*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type ValidateInvoiceRequest struct {
	//
	// Invoice it is lightning network invoice, which is the string which
	// contains amount, description, destination, and other info which is
	// needed for sender to successfully send payment.
	Invoice string `protobuf:"bytes,1,opt,name=invoice" json:"invoice,omitempty"`
	//
	// (optional) Amount is the amount which should be received on this
	// receipt, in bitcoin.
	Amount string `protobuf:"bytes,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *ValidateInvoiceRequest) Reset()                    { *m = ValidateInvoiceRequest{} }
func (m *ValidateInvoiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateInvoiceRequest) ProtoMessage()               {}
func (*ValidateInvoiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ValidateInvoiceRequest) GetInvoice() string {
	if m != nil {
		return m.Invoice
	}
	return ""
}

func (m *ValidateInvoiceRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EstimateFeeRequest struct {
	//
	// (optional) Amount is number of money which should be given to the
	// another entity, in bitcoin.
	Amount string `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	//
	// Invoice it is lightning network invoice, which is the string which
	// contains amount, description, destination, and other info which is
	// needed for sender to successfully send payment.
	Invoice string `protobuf:"bytes,2,opt,name=invoice" json:"invoice,omitempty"`
}

func (m *EstimateFeeRequest) Reset()                    { *m = EstimateFeeRequest{} }
func (m *EstimateFeeRequest) String() string            { return proto.CompactTextString(m) }
func (*EstimateFeeRequest) ProtoMessage()               {}
func (*EstimateFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EstimateFeeRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EstimateFeeRequest) GetInvoice() string {
	if m != nil {
		return m.Invoice
	}
	return ""
}

type EstimateFeeResponse struct {
	//
	// MediaFee is the fee which is taken by the lightning
	// network in order to propagate the payment.
	MediaFee string `protobuf:"bytes,1,opt,name=media_fee,json=mediaFee" json:"media_fee,omitempty"`
}

func (m *EstimateFeeResponse) Reset()                    { *m = EstimateFeeResponse{} }
func (m *EstimateFeeResponse) String() string            { return proto.CompactTextString(m) }
func (*EstimateFeeResponse) ProtoMessage()               {}
func (*EstimateFeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *EstimateFeeResponse) GetMediaFee() string {
	if m != nil {
		return m.MediaFee
	}
	return ""
}

type SendPaymentRequest struct {
	//
	// Amount is number of money which should be given to the another entity,
	// in bitcoin.
	Amount string `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	//
	// Invoice it is lightning network invoice, which is the string which
	// contains amount, description, destination, and other info which is
	// needed for sender to successfully send payment.
	Invoice string `protobuf:"bytes,2,opt,name=invoice" json:"invoice,omitempty"`
}

func (m *SendPaymentRequest) Reset()                    { *m = SendPaymentRequest{} }
func (m *SendPaymentRequest) String() string            { return proto.CompactTextString(m) }
func (*SendPaymentRequest) ProtoMessage()               {}
func (*SendPaymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SendPaymentRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *SendPaymentRequest) GetInvoice() string {
	if m != nil {
		return m.Invoice
	}
	return ""
}

type PaymentByIDRequest struct {
	//
	// PaymentID is the payment id which was created by service itself,
	// for unified identification of the payment.
	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
}

func (m *PaymentByIDRequest) Reset()                    { *m = PaymentByIDRequest{} }
func (m *PaymentByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentByIDRequest) ProtoMessage()               {}
func (*PaymentByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PaymentByIDRequest) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

type PaymentByInvoiceRequest struct {
	//
	// Invoice it is lightning network invoice, which is the string which
	// contains amount, description, destination, and other info which is
	// needed for sender to successfully send payment.
	Invoice string `protobuf:"bytes,1,opt,name=invoice" json:"invoice,omitempty"`
}

func (m *PaymentByInvoiceRequest) Reset()                    { *m = PaymentByInvoiceRequest{} }
func (m *PaymentByInvoiceRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentByInvoiceRequest) ProtoMessage()               {}
func (*PaymentByInvoiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PaymentByInvoiceRequest) GetInvoice() string {
	if m != nil {
		return m.Invoice
	}
	return ""
}

type ListPaymentsRequest struct {
	//
	// (optional) Status denotes the stage of the processing the payment.
	Status PaymentStatus `protobuf:"varint,1,opt,name=status,enum=hubrpc.PaymentStatus" json:"status,omitempty"`
	//
	// (optional) Direction denotes the direction of the payment.
	Direction PaymentDirection `protobuf:"varint,2,opt,name=direction,enum=hubrpc.PaymentDirection" json:"direction,omitempty"`
	//
	// (optional) PaymentSystem denotes is that payment belongs to business
	// logic of payment server or it was originated by user / third-party
	// service.
	System PaymentSystem `protobuf:"varint,3,opt,name=system,enum=hubrpc.PaymentSystem" json:"system,omitempty"`
}

func (m *ListPaymentsRequest) Reset()                    { *m = ListPaymentsRequest{} }
func (m *ListPaymentsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPaymentsRequest) ProtoMessage()               {}
func (*ListPaymentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ListPaymentsRequest) GetStatus() PaymentStatus {
	if m != nil {
		return m.Status
	}
	return PaymentStatus_STATUS_NONE
}

func (m *ListPaymentsRequest) GetDirection() PaymentDirection {
	if m != nil {
		return m.Direction
	}
	return PaymentDirection_DIRECTION_NONE
}

func (m *ListPaymentsRequest) GetSystem() PaymentSystem {
	if m != nil {
		return m.System
	}
	return PaymentSystem_SYSTEM_NONE
}

type ListPaymentsResponse struct {
	Payments []*Payment `protobuf:"bytes,1,rep,name=payments" json:"payments,omitempty"`
}

func (m *ListPaymentsResponse) Reset()                    { *m = ListPaymentsResponse{} }
func (m *ListPaymentsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPaymentsResponse) ProtoMessage()               {}
func (*ListPaymentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ListPaymentsResponse) GetPayments() []*Payment {
	if m != nil {
		return m.Payments
	}
	return nil
}

type NodeIdentificator struct {
	// Types that are valid to be assigned to Identificator:
	//	*NodeIdentificator_NodePubKey
	//	*NodeIdentificator_NodeName
	Identificator isNodeIdentificator_Identificator `protobuf_oneof:"identificator"`
}

func (m *NodeIdentificator) Reset()                    { *m = NodeIdentificator{} }
func (m *NodeIdentificator) String() string            { return proto.CompactTextString(m) }
func (*NodeIdentificator) ProtoMessage()               {}
func (*NodeIdentificator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type isNodeIdentificator_Identificator interface{ isNodeIdentificator_Identificator() }

type NodeIdentificator_NodePubKey struct {
	NodePubKey string `protobuf:"bytes,1,opt,name=node_pub_key,json=nodePubKey,oneof"`
}
type NodeIdentificator_NodeName struct {
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,oneof"`
}

func (*NodeIdentificator_NodePubKey) isNodeIdentificator_Identificator() {}
func (*NodeIdentificator_NodeName) isNodeIdentificator_Identificator()   {}

func (m *NodeIdentificator) GetIdentificator() isNodeIdentificator_Identificator {
	if m != nil {
		return m.Identificator
	}
	return nil
}

func (m *NodeIdentificator) GetNodePubKey() string {
	if x, ok := m.GetIdentificator().(*NodeIdentificator_NodePubKey); ok {
		return x.NodePubKey
	}
	return ""
}

func (m *NodeIdentificator) GetNodeName() string {
	if x, ok := m.GetIdentificator().(*NodeIdentificator_NodeName); ok {
		return x.NodeName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NodeIdentificator) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NodeIdentificator_OneofMarshaler, _NodeIdentificator_OneofUnmarshaler, _NodeIdentificator_OneofSizer, []interface{}{
		(*NodeIdentificator_NodePubKey)(nil),
		(*NodeIdentificator_NodeName)(nil),
	}
}

func _NodeIdentificator_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NodeIdentificator)
	// identificator
	switch x := m.Identificator.(type) {
	case *NodeIdentificator_NodePubKey:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.NodePubKey)
	case *NodeIdentificator_NodeName:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.NodeName)
	case nil:
	default:
		return fmt.Errorf("NodeIdentificator.Identificator has unexpected type %T", x)
	}
	return nil
}

func _NodeIdentificator_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NodeIdentificator)
	switch tag {
	case 1: // identificator.node_pub_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Identificator = &NodeIdentificator_NodePubKey{x}
		return true, err
	case 2: // identificator.node_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Identificator = &NodeIdentificator_NodeName{x}
		return true, err
	default:
		return false, nil
	}
}

func _NodeIdentificator_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NodeIdentificator)
	// identificator
	switch x := m.Identificator.(type) {
	case *NodeIdentificator_NodePubKey:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.NodePubKey)))
		n += len(x.NodePubKey)
	case *NodeIdentificator_NodeName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.NodeName)))
		n += len(x.NodeName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Payment struct {
	//
	// PaymentID it is unique identificator of the payment generated inside
	// the system.
	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	//
	// UpdatedAt denotes the time when payment object has been last updated.
	UpdatedAt int64 `protobuf:"varint,2,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	//
	// Status denotes the stage of the processing the payment.
	Status PaymentStatus `protobuf:"varint,3,opt,name=status,enum=hubrpc.PaymentStatus" json:"status,omitempty"`
	//
	// Direction denotes the direction of the payment, whether
	// payment is going form us to someone else, or form someone else to us.
	Direction PaymentDirection `protobuf:"varint,4,opt,name=direction,enum=hubrpc.PaymentDirection" json:"direction,omitempty"`
	//
	// System denotes is that payment belongs to business logic of
	// payment server or it was originated by user / third-party service.
	System PaymentSystem `protobuf:"varint,5,opt,name=system,enum=hubrpc.PaymentSystem" json:"system,omitempty"`
	//
	// Invoice it is lightning network invoice, which is the string which
	// contains amount, description, destination, and other info which is
	// needed for sender to successfully send payment.
	Invoice string `protobuf:"bytes,6,opt,name=invoice" json:"invoice,omitempty"`
	// PaymentHash is the uniq identificator of the payment.
	PaymentHash string `protobuf:"bytes,7,opt,name=payment_hash,json=paymentHash" json:"payment_hash,omitempty"`
	//
	// Amount is the number of funds which receiver gets at the end in bitcoin.
	Amount string `protobuf:"bytes,8,opt,name=amount" json:"amount,omitempty"`
	//
	// MediaFee is the fee which is taken by the lightning
	// network in order to propagate the payment.
	MediaFee string `protobuf:"bytes,9,opt,name=media_fee,json=mediaFee" json:"media_fee,omitempty"`
}

func (m *Payment) Reset()                    { *m = Payment{} }
func (m *Payment) String() string            { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()               {}
func (*Payment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Payment) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

func (m *Payment) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Payment) GetStatus() PaymentStatus {
	if m != nil {
		return m.Status
	}
	return PaymentStatus_STATUS_NONE
}

func (m *Payment) GetDirection() PaymentDirection {
	if m != nil {
		return m.Direction
	}
	return PaymentDirection_DIRECTION_NONE
}

func (m *Payment) GetSystem() PaymentSystem {
	if m != nil {
		return m.System
	}
	return PaymentSystem_SYSTEM_NONE
}

func (m *Payment) GetInvoice() string {
	if m != nil {
		return m.Invoice
	}
	return ""
}

func (m *Payment) GetPaymentHash() string {
	if m != nil {
		return m.PaymentHash
	}
	return ""
}

func (m *Payment) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Payment) GetMediaFee() string {
	if m != nil {
		return m.MediaFee
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "hubrpc.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "hubrpc.EmptyResponse")
	proto.RegisterType((*CheckNodeStatsRequest)(nil), "hubrpc.CheckNodeStatsRequest")
	proto.RegisterType((*CheckNodeStatsResponse)(nil), "hubrpc.CheckNodeStatsResponse")
	proto.RegisterType((*CheckNodeStatsResponse_NodeStatus)(nil), "hubrpc.CheckNodeStatsResponse.NodeStatus")
	proto.RegisterType((*CheckNodeStatsResponse_NodeStatus_ChannelStats)(nil), "hubrpc.CheckNodeStatsResponse.NodeStatus.ChannelStats")
	proto.RegisterType((*CheckNodeStatsResponse_NodeStatus_PaymentsStats)(nil), "hubrpc.CheckNodeStatsResponse.NodeStatus.PaymentsStats")
	proto.RegisterType((*CheckNodeStatsResponse_NodeStatus_RankStats)(nil), "hubrpc.CheckNodeStatsResponse.NodeStatus.RankStats")
	proto.RegisterType((*CreateInvoiceRequest)(nil), "hubrpc.CreateInvoiceRequest")
	proto.RegisterType((*CreateInvoiceResponse)(nil), "hubrpc.CreateInvoiceResponse")
	proto.RegisterType((*BalanceRequest)(nil), "hubrpc.BalanceRequest")
	proto.RegisterType((*Balance)(nil), "hubrpc.Balance")
	proto.RegisterType((*ValidateInvoiceResponse)(nil), "hubrpc.ValidateInvoiceResponse")
	proto.RegisterType((*Invoice)(nil), "hubrpc.Invoice")
	proto.RegisterType((*BalanceResponse)(nil), "hubrpc.BalanceResponse")
	proto.RegisterType((*ValidateInvoiceRequest)(nil), "hubrpc.ValidateInvoiceRequest")
	proto.RegisterType((*EstimateFeeRequest)(nil), "hubrpc.EstimateFeeRequest")
	proto.RegisterType((*EstimateFeeResponse)(nil), "hubrpc.EstimateFeeResponse")
	proto.RegisterType((*SendPaymentRequest)(nil), "hubrpc.SendPaymentRequest")
	proto.RegisterType((*PaymentByIDRequest)(nil), "hubrpc.PaymentByIDRequest")
	proto.RegisterType((*PaymentByInvoiceRequest)(nil), "hubrpc.PaymentByInvoiceRequest")
	proto.RegisterType((*ListPaymentsRequest)(nil), "hubrpc.ListPaymentsRequest")
	proto.RegisterType((*ListPaymentsResponse)(nil), "hubrpc.ListPaymentsResponse")
	proto.RegisterType((*NodeIdentificator)(nil), "hubrpc.NodeIdentificator")
	proto.RegisterType((*Payment)(nil), "hubrpc.Payment")
	proto.RegisterEnum("hubrpc.Media", Media_name, Media_value)
	proto.RegisterEnum("hubrpc.PaymentStatus", PaymentStatus_name, PaymentStatus_value)
	proto.RegisterEnum("hubrpc.PaymentDirection", PaymentDirection_name, PaymentDirection_value)
	proto.RegisterEnum("hubrpc.PaymentSystem", PaymentSystem_name, PaymentSystem_value)
	proto.RegisterEnum("hubrpc.SortType", SortType_name, SortType_value)
	proto.RegisterEnum("hubrpc.Period", Period_name, Period_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	//
	// CreateInvoice is used to create lightning network invoice in which
	// will be used to receive money from external lightning network entity.
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	//
	// ValidateInvoice is used to validate invoice on proper network and amount.
	ValidateInvoice(ctx context.Context, in *ValidateInvoiceRequest, opts ...grpc.CallOption) (*ValidateInvoiceResponse, error)
	//
	// Balance is used to get info about number of funds locked in channels.
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	//
	// EstimateFee estimates the fee of the payment.
	EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error)
	//
	// SendPayment sends payment to the given invoice,
	// ensures in the validity of the invoice.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	//
	// PaymentByID is used to fetch the information about payment, by the
	// given payment id.
	PaymentByID(ctx context.Context, in *PaymentByIDRequest, opts ...grpc.CallOption) (*Payment, error)
	//
	// PaymentByInvoice is used to fetch the information about payment, by the
	// given invoice.
	PaymentByInvoice(ctx context.Context, in *PaymentByInvoiceRequest, opts ...grpc.CallOption) (*Payment, error)
	//
	// ListPayments returns list of payment which were registered by the
	// system.
	ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...grpc.CallOption) (*ListPaymentsResponse, error)
	//
	// CheckNodeStats return statistical data about node, and sort nodes by
	// internal ranking algorithm.
	CheckNodeStats(ctx context.Context, in *CheckNodeStatsRequest, opts ...grpc.CallOption) (*CheckNodeStatsResponse, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	out := new(CreateInvoiceResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/CreateInvoice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) ValidateInvoice(ctx context.Context, in *ValidateInvoiceRequest, opts ...grpc.CallOption) (*ValidateInvoiceResponse, error) {
	out := new(ValidateInvoiceResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/ValidateInvoice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error) {
	out := new(EstimateFeeResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/EstimateFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/SendPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) PaymentByID(ctx context.Context, in *PaymentByIDRequest, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/PaymentByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) PaymentByInvoice(ctx context.Context, in *PaymentByInvoiceRequest, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/PaymentByInvoice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...grpc.CallOption) (*ListPaymentsResponse, error) {
	out := new(ListPaymentsResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/ListPayments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) CheckNodeStats(ctx context.Context, in *CheckNodeStatsRequest, opts ...grpc.CallOption) (*CheckNodeStatsResponse, error) {
	out := new(CheckNodeStatsResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Hub/CheckNodeStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hub service

type HubServer interface {
	//
	// CreateInvoice is used to create lightning network invoice in which
	// will be used to receive money from external lightning network entity.
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	//
	// ValidateInvoice is used to validate invoice on proper network and amount.
	ValidateInvoice(context.Context, *ValidateInvoiceRequest) (*ValidateInvoiceResponse, error)
	//
	// Balance is used to get info about number of funds locked in channels.
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	//
	// EstimateFee estimates the fee of the payment.
	EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error)
	//
	// SendPayment sends payment to the given invoice,
	// ensures in the validity of the invoice.
	SendPayment(context.Context, *SendPaymentRequest) (*Payment, error)
	//
	// PaymentByID is used to fetch the information about payment, by the
	// given payment id.
	PaymentByID(context.Context, *PaymentByIDRequest) (*Payment, error)
	//
	// PaymentByInvoice is used to fetch the information about payment, by the
	// given invoice.
	PaymentByInvoice(context.Context, *PaymentByInvoiceRequest) (*Payment, error)
	//
	// ListPayments returns list of payment which were registered by the
	// system.
	ListPayments(context.Context, *ListPaymentsRequest) (*ListPaymentsResponse, error)
	//
	// CheckNodeStats return statistical data about node, and sort nodes by
	// internal ranking algorithm.
	CheckNodeStats(context.Context, *CheckNodeStatsRequest) (*CheckNodeStatsResponse, error)
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_ValidateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ValidateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/ValidateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ValidateInvoice(ctx, req.(*ValidateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).EstimateFee(ctx, req.(*EstimateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_PaymentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).PaymentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/PaymentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).PaymentByID(ctx, req.(*PaymentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_PaymentByInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentByInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).PaymentByInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/PaymentByInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).PaymentByInvoice(ctx, req.(*PaymentByInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_ListPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ListPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/ListPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ListPayments(ctx, req.(*ListPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_CheckNodeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNodeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).CheckNodeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Hub/CheckNodeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).CheckNodeStats(ctx, req.(*CheckNodeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hubrpc.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _Hub_CreateInvoice_Handler,
		},
		{
			MethodName: "ValidateInvoice",
			Handler:    _Hub_ValidateInvoice_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _Hub_Balance_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _Hub_EstimateFee_Handler,
		},
		{
			MethodName: "SendPayment",
			Handler:    _Hub_SendPayment_Handler,
		},
		{
			MethodName: "PaymentByID",
			Handler:    _Hub_PaymentByID_Handler,
		},
		{
			MethodName: "PaymentByInvoice",
			Handler:    _Hub_PaymentByInvoice_Handler,
		},
		{
			MethodName: "ListPayments",
			Handler:    _Hub_ListPayments_Handler,
		},
		{
			MethodName: "CheckNodeStats",
			Handler:    _Hub_CheckNodeStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hubrpc.proto",
}

func init() { proto.RegisterFile("hubrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x6b, 0x6e, 0xe3, 0xc8,
	0x11, 0x5e, 0x5a, 0xb2, 0x24, 0x96, 0x64, 0x59, 0xe9, 0xb1, 0x65, 0xad, 0x66, 0x66, 0xd7, 0xcb,
	0x00, 0x81, 0xd7, 0xc1, 0x0e, 0x02, 0x3b, 0x98, 0x3c, 0x10, 0x04, 0x90, 0x25, 0x7a, 0xcc, 0x1d,
	0x59, 0x32, 0x28, 0x79, 0x36, 0x83, 0x04, 0x20, 0x5a, 0x62, 0xcf, 0x98, 0x30, 0x1f, 0x0a, 0x1f,
	0x4e, 0x74, 0x80, 0xdc, 0x21, 0x07, 0xc8, 0xbf, 0x1c, 0x20, 0x67, 0x08, 0x10, 0x20, 0xb7, 0x48,
	0xae, 0x11, 0xb0, 0xbb, 0x9a, 0x22, 0x25, 0x39, 0xeb, 0x9d, 0x7f, 0xea, 0xfa, 0xea, 0xfb, 0xaa,
	0xaa, 0x5f, 0xd5, 0x14, 0x34, 0xee, 0x92, 0x59, 0xb8, 0x98, 0xbf, 0x5a, 0x84, 0x41, 0x1c, 0x90,
	0x8a, 0x18, 0x69, 0x4d, 0x68, 0xe8, 0xde, 0x22, 0x5e, 0x9a, 0xec, 0x8f, 0x09, 0x8b, 0x62, 0x6d,
	0x1f, 0xf6, 0x70, 0x1c, 0x2d, 0x02, 0x3f, 0x62, 0xda, 0x5f, 0x15, 0x38, 0xec, 0xdf, 0xb1, 0xf9,
	0xfd, 0x28, 0xb0, 0xd9, 0x24, 0xa6, 0x71, 0x84, 0xae, 0xe4, 0x27, 0x50, 0x59, 0xb0, 0xd0, 0x09,
	0xec, 0x8e, 0x72, 0xac, 0x9c, 0x34, 0xcf, 0x9a, 0xaf, 0x30, 0xc2, 0x0d, 0xb7, 0x9a, 0x88, 0x12,
	0x02, 0x65, 0x3f, 0xb0, 0x59, 0x67, 0xe7, 0x58, 0x39, 0x51, 0x4d, 0xfe, 0x9b, 0x1c, 0xc0, 0xae,
	0xeb, 0x78, 0x4e, 0xdc, 0x29, 0x1d, 0x2b, 0x27, 0xbb, 0xa6, 0x18, 0x90, 0x6f, 0x40, 0x8d, 0x82,
	0x30, 0xb6, 0xe2, 0xe5, 0x82, 0x75, 0xca, 0x5c, 0xb4, 0x25, 0x45, 0x27, 0x41, 0x18, 0x4f, 0x97,
	0x0b, 0x66, 0xd6, 0x22, 0xfc, 0xa5, 0xfd, 0x13, 0xa0, 0xbd, 0x9e, 0x9a, 0xc8, 0x9a, 0xe8, 0x50,
	0x8b, 0x62, 0x1a, 0x27, 0x11, 0x8b, 0x3a, 0xca, 0x71, 0xe9, 0xa4, 0x7e, 0xf6, 0xb5, 0x14, 0xda,
	0xce, 0x78, 0x25, 0x2d, 0x49, 0x64, 0x66, 0xd4, 0xee, 0x7f, 0x55, 0x80, 0x15, 0x40, 0xda, 0x50,
	0xb1, 0x03, 0x8f, 0x3a, 0x3e, 0xaf, 0x58, 0x35, 0x71, 0x44, 0x8e, 0xa0, 0xba, 0x48, 0x66, 0xd6,
	0x3d, 0x5b, 0x62, 0x91, 0x95, 0x45, 0x32, 0x7b, 0xcb, 0x96, 0xe4, 0x05, 0xa8, 0xf4, 0x81, 0x3a,
	0x2e, 0x9d, 0xb9, 0x8c, 0x97, 0x5a, 0x33, 0x57, 0x06, 0x8e, 0xfa, 0x81, 0x47, 0x5d, 0x87, 0x45,
	0x9d, 0xf2, 0x71, 0xe9, 0x44, 0x35, 0x57, 0x06, 0x62, 0x02, 0x84, 0xd4, 0xbf, 0xb7, 0xd2, 0x64,
	0xa2, 0xce, 0xee, 0xb1, 0x72, 0x52, 0x3f, 0x3b, 0x7f, 0x72, 0x11, 0xaf, 0x4c, 0xea, 0xdf, 0x0b,
	0x50, 0x0d, 0xe5, 0x4f, 0xf2, 0x07, 0xd8, 0x5b, 0xd0, 0xa5, 0xc7, 0xfc, 0x18, 0x65, 0x2b, 0x5c,
	0xf6, 0x17, 0x4f, 0x97, 0xbd, 0x11, 0xf4, 0x48, 0x38, 0x34, 0x50, 0x4d, 0xa8, 0xff, 0x1e, 0xf6,
	0xe6, 0x77, 0xd4, 0xf7, 0x99, 0x8b, 0xea, 0x55, 0xae, 0xfe, 0xfa, 0xe9, 0xea, 0x7d, 0x41, 0x47,
	0xf1, 0x79, 0x6e, 0xd4, 0xfd, 0x8f, 0x02, 0x8d, 0x3c, 0x4c, 0xce, 0xe0, 0xd0, 0x0d, 0xe6, 0xf7,
	0xcc, 0xb6, 0xdc, 0x60, 0x4e, 0x5d, 0x77, 0x69, 0xd1, 0x79, 0xec, 0x3c, 0x30, 0xbe, 0x36, 0x8a,
	0xf9, 0x4c, 0x80, 0x43, 0x81, 0xf5, 0x38, 0x44, 0x7e, 0x0e, 0x6d, 0xe4, 0x84, 0xcc, 0x0b, 0x62,
	0xb6, 0x22, 0xed, 0x70, 0xd2, 0x81, 0x40, 0x4d, 0x04, 0x37, 0x58, 0x32, 0x52, 0xf0, 0xc0, 0x42,
	0xea, 0xba, 0x7c, 0x49, 0x33, 0x16, 0x86, 0x1a, 0x0b, 0x8c, 0xbc, 0x86, 0xa3, 0xf5, 0x58, 0x92,
	0x56, 0xe6, 0xb4, 0xc3, 0x62, 0x30, 0xe4, 0x75, 0xff, 0x56, 0x82, 0xbd, 0xc2, 0x2c, 0x93, 0x9f,
	0xc1, 0x01, 0x4d, 0xc1, 0x8f, 0xcc, 0x8a, 0xd2, 0xa5, 0xfb, 0x10, 0x84, 0x7f, 0xa2, 0xa1, 0x8d,
	0x85, 0x12, 0xc4, 0x26, 0xcc, 0x8f, 0x2f, 0x05, 0x42, 0x7e, 0x09, 0x1d, 0xc9, 0x08, 0xd9, 0x9c,
	0x39, 0x0f, 0xcc, 0xce, 0x58, 0xa2, 0xd2, 0x36, 0xe2, 0x26, 0xc2, 0x92, 0xf9, 0x15, 0x34, 0xf2,
	0xb1, 0xb0, 0xc2, 0x7a, 0x2e, 0x46, 0x9a, 0x0e, 0x16, 0x52, 0x4c, 0x47, 0x54, 0x45, 0x10, 0x5b,
	0x4b, 0x47, 0x32, 0x36, 0xd2, 0xd9, 0x15, 0xe9, 0x20, 0xbe, 0x25, 0x9d, 0x7c, 0x2c, 0xbe, 0x5f,
	0x15, 0xb3, 0x9e, 0x8b, 0x41, 0x3e, 0x87, 0x9a, 0x9f, 0x78, 0x02, 0xae, 0xf2, 0xdb, 0xa4, 0xea,
	0x27, 0x9e, 0xcc, 0x34, 0x85, 0x36, 0x62, 0xd6, 0xb8, 0x1b, 0xf1, 0x13, 0x6f, 0x3d, 0xde, 0x09,
	0xb4, 0xa4, 0x58, 0xe6, 0xad, 0x72, 0xef, 0x26, 0x8a, 0xa2, 0x67, 0xf7, 0x5f, 0x0a, 0xa8, 0xd9,
	0x19, 0x23, 0xe7, 0xd0, 0xe6, 0x87, 0x15, 0xcf, 0x43, 0x24, 0x14, 0xfc, 0xc4, 0xe3, 0x8b, 0x54,
	0x32, 0x9f, 0xa5, 0x68, 0xb6, 0xaa, 0xcc, 0x8f, 0x47, 0x89, 0x47, 0x7e, 0x05, 0x9f, 0x6f, 0x21,
	0x3d, 0x04, 0x6e, 0xe2, 0x89, 0x0d, 0x59, 0x32, 0xdb, 0xeb, 0xbc, 0x77, 0x1c, 0x25, 0xcf, 0x81,
	0x9f, 0x6a, 0xcb, 0xb1, 0xf1, 0x62, 0x29, 0x99, 0xb5, 0xd4, 0x60, 0xd8, 0x2e, 0x4b, 0x4f, 0x06,
	0x07, 0xb1, 0x00, 0xb1, 0xc5, 0x9d, 0x78, 0xc9, 0x57, 0x08, 0x73, 0xc1, 0x32, 0x7a, 0x08, 0x69,
	0x37, 0x70, 0xd0, 0x0f, 0x19, 0x8d, 0x99, 0xe1, 0x3f, 0x04, 0xce, 0x9c, 0xc9, 0x4b, 0xbe, 0x0d,
	0x15, 0xea, 0x05, 0x89, 0x1f, 0xcb, 0x2b, 0x4f, 0x8c, 0xc8, 0x31, 0xd4, 0x6d, 0x16, 0xcd, 0x43,
	0x67, 0x11, 0x3b, 0x81, 0x8f, 0xd7, 0x5e, 0xde, 0xa4, 0xf9, 0x70, 0xb8, 0xa6, 0x88, 0x77, 0xf3,
	0x8f, 0x61, 0x6f, 0x9e, 0x02, 0x4e, 0xe0, 0x5b, 0x36, 0x8d, 0x19, 0x4e, 0x51, 0x43, 0x1a, 0x07,
	0x34, 0x66, 0xa4, 0x03, 0x55, 0x47, 0xf0, 0x50, 0x5b, 0x0e, 0xd3, 0x8c, 0xd8, 0x9f, 0x17, 0x4e,
	0xb8, 0xc4, 0xba, 0x71, 0xa4, 0xb5, 0xa0, 0x79, 0x41, 0x5d, 0xea, 0x67, 0xb9, 0x6b, 0x3d, 0xa8,
	0xa2, 0xa5, 0x78, 0x11, 0x8b, 0x4a, 0x72, 0x17, 0x71, 0x07, 0xaa, 0x0b, 0xe6, 0xdb, 0x8e, 0xff,
	0x51, 0x06, 0xc3, 0xa1, 0x36, 0x80, 0xa3, 0x77, 0xd4, 0x75, 0xec, 0x2d, 0x65, 0x7c, 0xbd, 0xca,
	0x50, 0xe1, 0xf7, 0xdc, 0xbe, 0xbc, 0xe7, 0xa4, 0xa7, 0xc4, 0xb5, 0x7f, 0x28, 0x50, 0x45, 0x63,
	0xda, 0x0d, 0x3d, 0xe6, 0x05, 0x98, 0x04, 0xff, 0x9d, 0x76, 0xc3, 0x07, 0xea, 0x26, 0xb2, 0x54,
	0x31, 0xd8, 0x9c, 0xa7, 0xd2, 0x96, 0x79, 0x5a, 0xcd, 0x46, 0x39, 0x3f, 0x1b, 0x29, 0xf9, 0x03,
	0x75, 0xdd, 0x19, 0x9d, 0xdf, 0x5b, 0xd4, 0xb6, 0x43, 0x7e, 0xce, 0x54, 0xb3, 0x21, 0x8d, 0x3d,
	0xdb, 0x0e, 0x71, 0x11, 0x63, 0xc7, 0xe7, 0x7a, 0xfc, 0x70, 0x89, 0x45, 0x94, 0x26, 0xed, 0xb7,
	0xb0, 0x9f, 0x4d, 0x2a, 0xd6, 0xfd, 0x53, 0xa8, 0xcd, 0x84, 0x49, 0xb6, 0xd6, 0xac, 0x70, 0xe9,
	0x9a, 0x39, 0x68, 0xdf, 0x42, 0x7b, 0x63, 0xfe, 0xc4, 0xc6, 0xea, 0x14, 0xa7, 0xaf, 0xb8, 0xc0,
	0xb8, 0xe5, 0x76, 0xf2, 0x5b, 0x4e, 0xbb, 0x04, 0xa2, 0x47, 0xb1, 0xe3, 0xd1, 0x98, 0x5d, 0xb2,
	0xef, 0xdd, 0xa0, 0x8f, 0x6e, 0x20, 0xed, 0x0c, 0x9e, 0x15, 0x74, 0xb0, 0xae, 0xe7, 0xa0, 0x7a,
	0xcc, 0x76, 0xa8, 0xf5, 0x81, 0xc9, 0x94, 0x6a, 0xdc, 0x70, 0xc9, 0x58, 0x1a, 0x7b, 0xc2, 0x7c,
	0x1b, 0x4f, 0xe2, 0xa7, 0xc7, 0x3e, 0x07, 0x82, 0x1a, 0x17, 0x4b, 0x63, 0x20, 0x75, 0x5e, 0x02,
	0xc8, 0xb6, 0xec, 0xd8, 0x72, 0x7b, 0xa2, 0xc5, 0xb0, 0xb5, 0x73, 0x38, 0x5a, 0x91, 0x9e, 0x38,
	0x8b, 0xda, 0xdf, 0x15, 0x78, 0x36, 0x74, 0xa2, 0x58, 0x5e, 0x1e, 0x92, 0xf1, 0x0d, 0x54, 0xc4,
	0xf3, 0x06, 0x5f, 0x6d, 0x87, 0xd9, 0xab, 0x6d, 0xd5, 0xca, 0x93, 0xc8, 0x44, 0x27, 0xf2, 0x1a,
	0x54, 0xdb, 0x09, 0xd9, 0x3c, 0x3b, 0xe5, 0xcd, 0xb3, 0xce, 0x1a, 0x63, 0x20, 0x71, 0x73, 0xe5,
	0xca, 0xc3, 0x2c, 0xa3, 0x98, 0x79, 0x7c, 0xd7, 0x6e, 0x09, 0xc3, 0x41, 0x13, 0x9d, 0xb4, 0x3e,
	0x1c, 0x14, 0x93, 0x5d, 0x6d, 0x36, 0x79, 0x3b, 0xae, 0x6f, 0x36, 0xb9, 0x16, 0x99, 0x83, 0xf6,
	0x11, 0x7e, 0x94, 0xbe, 0x25, 0x0c, 0x9b, 0xf9, 0xb1, 0xf3, 0xc1, 0x99, 0xd3, 0x38, 0x08, 0x89,
	0x06, 0x8d, 0xf4, 0xc5, 0x69, 0xc9, 0x07, 0x1a, 0x9f, 0xa6, 0xab, 0xcf, 0x4c, 0x48, 0xad, 0x37,
	0xe2, 0x99, 0xf6, 0x12, 0x54, 0xee, 0xe3, 0x53, 0xbc, 0x78, 0x53, 0x87, 0x5a, 0x6a, 0x1a, 0x51,
	0x8f, 0x5d, 0xec, 0xc3, 0x9e, 0x93, 0xd7, 0xd4, 0xfe, 0xbd, 0x03, 0x55, 0x0c, 0xff, 0x3d, 0x6b,
	0x97, 0xc2, 0xc9, 0x22, 0xdd, 0xfe, 0xb6, 0x45, 0x63, 0xbc, 0xd4, 0x55, 0xb4, 0xf4, 0xf2, 0xab,
	0x51, 0xfa, 0xc1, 0xab, 0x51, 0xfe, 0x94, 0xd5, 0xd8, 0x7d, 0xc2, 0x6a, 0xe4, 0x77, 0x55, 0xa5,
	0x78, 0x36, 0xbf, 0x02, 0xf9, 0xe4, 0xb3, 0xee, 0x68, 0x74, 0xc7, 0x1b, 0xae, 0x6a, 0xd6, 0xd1,
	0x76, 0x45, 0xa3, 0xbb, 0xdc, 0xa1, 0xa8, 0x15, 0x0e, 0x45, 0xe1, 0x7c, 0xa9, 0xc5, 0xf3, 0x75,
	0xfa, 0x1a, 0x76, 0xaf, 0xd3, 0xdf, 0xa4, 0x09, 0x70, 0xad, 0x0f, 0x8c, 0x9e, 0x35, 0x1a, 0x8f,
	0xf4, 0xd6, 0x67, 0xe9, 0xf8, 0x62, 0x38, 0xee, 0xbf, 0xed, 0x5f, 0xf5, 0x8c, 0x51, 0x4b, 0x21,
	0x7b, 0xa0, 0x0e, 0x8d, 0x37, 0x57, 0xd3, 0x91, 0x31, 0x7a, 0xd3, 0xda, 0x39, 0xbd, 0xcd, 0xde,
	0x4a, 0xf8, 0x44, 0xdf, 0x87, 0xfa, 0x64, 0xda, 0x9b, 0xde, 0x4e, 0xa4, 0x40, 0x1d, 0xaa, 0xdf,
	0xf5, 0x8c, 0x69, 0xea, 0xae, 0xa4, 0x83, 0x1b, 0x7d, 0x34, 0xe0, 0xdc, 0x54, 0xaa, 0x3f, 0xbe,
	0xbe, 0x19, 0xea, 0x53, 0x7d, 0xd0, 0x2a, 0x11, 0x80, 0xca, 0x65, 0xcf, 0x18, 0xea, 0x83, 0x56,
	0xf9, 0xf4, 0x02, 0x5a, 0xeb, 0xd3, 0x49, 0x08, 0x34, 0x07, 0x86, 0xa9, 0xf7, 0xa7, 0xc6, 0x78,
	0x24, 0xc5, 0x1b, 0x50, 0x33, 0x46, 0xfd, 0xf1, 0xb5, 0x50, 0x6f, 0x40, 0x6d, 0x7c, 0x3b, 0x7d,
	0x33, 0x16, 0xa9, 0xfd, 0x66, 0x95, 0x9a, 0x98, 0xd5, 0x34, 0xb5, 0xf7, 0x93, 0xa9, 0x7e, 0x5d,
	0x60, 0x4f, 0x75, 0x73, 0xd4, 0x1b, 0x0a, 0xb6, 0xfe, 0x3b, 0x1c, 0xed, 0x9c, 0x7e, 0x0b, 0x35,
	0xf9, 0xc5, 0x93, 0x26, 0x3a, 0x19, 0x9b, 0x53, 0x49, 0xdb, 0x87, 0xfa, 0xc5, 0x7b, 0x6b, 0xa2,
	0x8f, 0xa6, 0xd6, 0xe8, 0xf6, 0xba, 0xa5, 0xa0, 0xc1, 0x18, 0x0c, 0xf5, 0x91, 0x3e, 0x99, 0x88,
	0xca, 0x2e, 0xde, 0x5b, 0xef, 0xc6, 0xc3, 0xdb, 0x6b, 0xbd, 0x55, 0x3a, 0xbd, 0x82, 0x8a, 0xf8,
	0x24, 0x4b, 0x3d, 0x6f, 0x74, 0xd3, 0x18, 0x0f, 0xa4, 0x56, 0x15, 0x4a, 0x83, 0xde, 0xfb, 0x96,
	0x42, 0x6a, 0x50, 0xfe, 0x4e, 0xd7, 0xdf, 0xb6, 0x76, 0x88, 0x0a, 0xbb, 0xd7, 0xe3, 0xd1, 0xf4,
	0xaa, 0x55, 0x4a, 0xdd, 0xa7, 0x57, 0xa6, 0xae, 0x5b, 0xc2, 0x50, 0x3e, 0xfb, 0xcb, 0x2e, 0x94,
	0xae, 0x92, 0x19, 0x19, 0xc2, 0x5e, 0xa1, 0xb7, 0x93, 0x17, 0xd9, 0x1b, 0x7f, 0xcb, 0x23, 0xa2,
	0xfb, 0xf2, 0x11, 0x14, 0x0f, 0xb9, 0x09, 0xfb, 0x6b, 0x4d, 0x82, 0x7c, 0x21, 0x19, 0xdb, 0xbb,
	0x47, 0xf7, 0xcb, 0x47, 0x71, 0xd4, 0xfc, 0xf5, 0xaa, 0xf7, 0xb7, 0xd7, 0xdb, 0x13, 0x6a, 0x1c,
	0x6d, 0xd8, 0x91, 0x7b, 0x09, 0xf5, 0x5c, 0x83, 0x20, 0x5d, 0xe9, 0xb7, 0xd9, 0x7d, 0xba, 0xcf,
	0xb7, 0x62, 0x59, 0x0e, 0xf5, 0x5c, 0xd3, 0x58, 0xe9, 0x6c, 0x76, 0x92, 0xee, 0xfa, 0xad, 0x96,
	0x72, 0x73, 0x8d, 0x62, 0xc5, 0xdd, 0xec, 0x1e, 0x9b, 0xdc, 0x41, 0xb6, 0x7b, 0xb3, 0x7e, 0x41,
	0xbe, 0xdc, 0x14, 0x28, 0xce, 0xe8, 0x86, 0x8a, 0x01, 0x8d, 0xfc, 0x95, 0x4c, 0xb2, 0x52, 0xb7,
	0x74, 0x95, 0xee, 0x8b, 0xed, 0x20, 0x4e, 0xc4, 0x18, 0x9a, 0xc5, 0x6f, 0x3f, 0xf2, 0xf2, 0xb1,
	0x6f, 0x42, 0x21, 0xf7, 0xc5, 0xff, 0xff, 0x64, 0x9c, 0x55, 0xf8, 0x9f, 0x18, 0xe7, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xdd, 0x76, 0x53, 0x61, 0xd4, 0x10, 0x00, 0x00,
}
