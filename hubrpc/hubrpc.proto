syntax = "proto3";

package hubrpc;

service Hub {
    //
    // CreateInvoice is used to create lightning network invoice in which
    // will be used to receive money from external lightning network entity.
    rpc CreateInvoice (CreateInvoiceRequest) returns (CreateInvoiceResponse);

    //
    // ValidateInvoice is used to validate invoice on proper network and amount.
    rpc ValidateInvoice (ValidateInvoiceRequest) returns (ValidateInvoiceResponse);

    //
    // Balance is used to get info about number of funds locked in channels.
    rpc Balance (BalanceRequest) returns (BalanceResponse);

    //
    // EstimateFee estimates the fee of the payment.
    rpc EstimateFee (EstimateFeeRequest) returns (EstimateFeeResponse);

    //
    // SendPayment sends payment to the given invoice,
    // ensures in the validity of the invoice.
    rpc SendPayment (SendPaymentRequest) returns (Payment);

    //
    // PaymentByID is used to fetch the information about payment, by the
    // given payment id.
    rpc PaymentByID (PaymentByIDRequest) returns (Payment);

    //
    // PaymentByInvoice is used to fetch the information about payment, by the
    // given invoice.
    rpc PaymentByInvoice (PaymentByInvoiceRequest) returns (Payment);

    //
    // ListPayments returns list of payment which were registered by the
    // system.
    rpc ListPayments (ListPaymentsRequest) returns (ListPaymentsResponse);

    //
    // CheckNodeStats return statistical data about node, and sort nodes by
    // internal ranking algorithm.
    rpc CheckNodeStats (CheckNodeStatsRequest) returns (CheckNodeStatsResponse);
}

message EmptyRequest {
}

message EmptyResponse {
}

message CheckNodeStatsRequest {
    Period period = 1;
    string node = 2;
    int32 limit = 3;
    SortType sort_type = 4;
}

message CheckNodeStatsResponse {
    message NodeStatus {
        message ChannelStats {
            // LockedLocallyActive is number of funds aggregated from all channels,
            // which could be used for send the payments. (In USD)
            double locked_locally_active = 1;

            // LockedRemotelyActive is number of funds aggregated from all channels,
            // which could be used for receiving the payments. (In USD)
            double locked_remotely_active = 2;

            // LockedLocallyOverall is number of funds aggregated from all channels,
            // which are locked on local side. This number include pending, as well
            // as active funds. (In USD)
            double locked_locally_overall = 3;

            // LockedRemotelyOverall is number of funds aggregated from all channels,
            // which are locked on remote side. This number include pending, as well
            // as active funds. (In USD)
            double locked_remotely_overall = 4;
        }

        message PaymentsStats {
            // AverageSentForwardSat is the number of funds which were sent
            // to this node generated by forwarding activity in the network. (In USD)
            //
            // NOTE: This metric will be non-zero if we have direct channel with node.
            double average_sent_forward = 1;

            // AverageReceivedForwardSat is the number of funds which were received
            // from this node generated by forwarding activity in the network. (In USD)
            //
            // NOTE: This metric will be non-zero if we have direct channel with node.
            double average_received_forward = 2;

            // AverageSent is the number of funds which were sens from
            // us to remote node, calculated over given period of time.
            // For example: average sent funds during the day, calculated over
            // week period. (In USD)
            double average_sent = 3;

            double overall_sent_forward = 4;
            double overall_received_forward = 5;
            double overall_sent = 6;

            int32 num_sent = 7;
            int32 num_received_forward = 8;
            int32 num_sent_forward = 9;
        }

        message RankStats {
            int64 rank_payments_sent_num = 1;
            int64 rank_payments_sent_volume = 2;
            int64 rank_idle = 3;
            int64 rank_forward_activity = 4;
        }

        // Domain is the name given by us to this node.
        string domain = 1;

        // PubKey is a identificator of node in lightning network.
        string pub_key = 2;

        // Available shows whether or not we could send payment directly to
        // the node.
        bool available = 3;

        // Anomalies will show message about anomalies which are related to
        // this node, such as not all funds being active, or node being
        // offline, or not enough funds being locked within channels, and
        // other.
        repeated string anomalies = 4;

        RankStats rank_stats = 5;
        PaymentsStats payment_stats = 6;
        ChannelStats channel_stats = 7;
    }

    repeated NodeStatus statuses = 1;
}

message CreateInvoiceRequest {
    //
    // (optional) Amount is the amount which should be received on this
    // receipt, in bitcoin.
    string amount = 1;

    //
    // (optional) Description description will be placed in the invoice itself,
    // which would allow user to see what he paid for later in the wallet.
    string description = 2;
}

message CreateInvoiceResponse {
    //
    // When this invoice was created.
    // NOTE: Only returns for lightning network media.
    int64 creation_date = 1;

    //
    // Invoice it is lightning network invoice, which is the string which
    // contains amount, description, destination, and other info which is
    // needed for sender to successfully send payment.
    string invoice = 2;

    //
    // Invoice expiry time in seconds. Default is 3600 (1 hour).
    // NOTE: Only returns for lightning network media.
    int64 expiry = 3;
}

message BalanceRequest {
}

message Balance {
    //
    // Available is the number of funds which could be used by this account
    // to send funds to someone else.
    string available = 1;

    //
    // Pending funds in pending payment channels.
    string pending = 2;
}

message ValidateInvoiceResponse {
    //
    // Invoice it is lightning network invoice, which is the string which
    // contains amount, description, destination, and other info which is
    // needed for sender to successfully send payment.
    Invoice invoice = 1;
}

message Invoice {
    //
    // An optional memo to attach along with the invoice. Used for record keeping
    // purposes for the invoice's creator, and will also be set in the
    // description field of the encoded payment request if the
    // description_hash field is not being used.
    string memo = 1;

    //
    // The value of this invoice in bitcoins.
    string value = 2;

    //
    // When this invoice was created.
    int64 creation_date = 3;

    //
    // Invoice expiry time in seconds. Default is 3600 (1 hour).
    int64 expiry = 4;

    //
    // Fallback on-chain address in case of lightning network payment fail.
    string fallback_addr = 5;

    //
    // Lightning Network public key of receiving node.
    string destination = 6;
}

message BalanceResponse {
    repeated Balance balances = 1;
}

message ValidateInvoiceRequest {
    //
    // Invoice it is lightning network invoice, which is the string which
    // contains amount, description, destination, and other info which is
    // needed for sender to successfully send payment.
    string invoice = 1;

    //
    // (optional) Amount is the amount which should be received on this
    // receipt, in bitcoin.
    string amount = 2;
}

message EstimateFeeRequest {
    //
    // (optional) Amount is number of money which should be given to the
    // another entity, in bitcoin.
    string amount = 1;

    //
    // Invoice it is lightning network invoice, which is the string which
    // contains amount, description, destination, and other info which is
    // needed for sender to successfully send payment.
    string invoice = 2;
}

message EstimateFeeResponse {
    //
    // MediaFee is the fee which is taken by the lightning
    // network in order to propagate the payment.
    string media_fee = 1;
}

message SendPaymentRequest {
    //
    // Amount is number of money which should be given to the another entity,
    // in bitcoin.
    string amount = 1;

    //
    // Invoice it is lightning network invoice, which is the string which
    // contains amount, description, destination, and other info which is
    // needed for sender to successfully send payment.
    string invoice = 2;
}

message PaymentByIDRequest {
    //
    // PaymentID is the payment id which was created by service itself,
    // for unified identification of the payment.
    string payment_id = 1;
}

message PaymentByInvoiceRequest {
    //
    // Invoice it is lightning network invoice, which is the string which
    // contains amount, description, destination, and other info which is
    // needed for sender to successfully send payment.
    string invoice = 1;
}


message ListPaymentsRequest {
    //
    // (optional) Status denotes the stage of the processing the payment.
    PaymentStatus status = 1;

    //
    // (optional) Direction denotes the direction of the payment.
    PaymentDirection direction = 2;

    //
    // (optional) PaymentSystem denotes is that payment belongs to business
    // logic of payment server or it was originated by user / third-party
    // service.
    PaymentSystem system = 3;
}

message ListPaymentsResponse {
    repeated Payment payments = 1;
}


message NodeIdentificator {
    oneof identificator {
        string node_pub_key = 1;
        string node_name = 2;
    }
}

message Payment {
    //
    // PaymentID it is unique identificator of the payment generated inside
    // the system.
    string payment_id = 1;

    //
    // UpdatedAt denotes the time when payment object has been last updated.
    int64 updated_at = 2;

    //
    // Status denotes the stage of the processing the payment.
    PaymentStatus status = 3;

    //
    // Direction denotes the direction of the payment, whether
    // payment is going form us to someone else, or form someone else to us.
    PaymentDirection direction = 4;

    //
    // System denotes is that payment belongs to business logic of
    // payment server or it was originated by user / third-party service.
    PaymentSystem system = 5;

    //
    // Invoice it is lightning network invoice, which is the string which
    // contains amount, description, destination, and other info which is
    // needed for sender to successfully send payment.
    string invoice = 6;

    // PaymentHash is the uniq identificator of the payment.
    string payment_hash = 7;

    //
    // Amount is the number of funds which receiver gets at the end in bitcoin.
    string amount = 8;

    //
    // MediaFee is the fee which is taken by the lightning
    // network in order to propagate the payment.
    string media_fee = 9;
}

// Media is a list of possible media types. Media is a type of technology which
// is used to transport value of underlying asset.
enum Media {
    MEDIA_NONE = 0;

    //
    // BLOCKCHAIN means that blockchain direct used for making the payments.
    BLOCKCHAIN = 1;

    //
    // LIGHTNING means that second layer on top of the blockchain is used for
    // making the payments.
    LIGHTNING = 2;
}

// PaymentStatus denotes the stage of the processing the payment.
enum PaymentStatus {
    STATUS_NONE = 0;

    //
    // WAITING means that payment has been created and waiting to be approved
    // for sending.
    WAITING = 1;

    //
    // PENDING means that service is seeing the payment, but it not yet approved
    // from the its POV.
    PENDING = 2;

    //
    // COMPLETED in case of outgoing/incoming payment this means that we
    // sent/received the transaction in/from the network and it was confirmed
    // number of times service believe sufficient. In case of the forward
    // transaction it means that we succesfully routed it through and
    // earned fee for that.
    COMPLETED = 3;

    //
    // FAILED means that services has tryied to send payment for couple of
    // times, but without success, and now service gave up.
    FAILED = 4;
}

// PaymentDirection denotes the direction of the payment, whether payment is
//	going form us to someone else, or form someone else to us.
enum PaymentDirection {
    DIRECTION_NONE = 0;

    //
    // INCOMING type of payment which service has received from someone else
    // in the media.
    INCOMING = 1;

    //
    // OUTGOING type of payment which service has sent to someone else in the
    // media.
    OUTGOING = 2;
}

// PaymentSystemSystem denotes is that payment belongs to business logic of
// payment server or it was originated by user / third-party service.
enum PaymentSystem {
    SYSTEM_NONE = 0;

    //
    // INTERNAL type of payment usually services the purpose of payment
    // server itself for stabilisation of system.
    INTERNAL = 1;

    //
    // EXTERNAL type of payment which was originated by user / third-party
    // services, this is what usually interesting for external viewer. This
    // type of payment changes balance.
    EXTERNAL = 2;
}

enum SortType {
    SORT_NONE = 0;

    //
    // BySentNum is used to sort nodes by number of payment we have sent to
    // this node.
    BY_SENT_NUM = 1;

    //
    // ByIdleness is used to sort nodes by capacity / volume ration, i.e. if
    // we have a lot of funds locked with node, but don't have activity node
    // will be ranked as idle.
    BY_IDLENESS = 2;

    //
    // ByVolume is used to sort nodes by overall volume including forward
    // volume.
    BY_VOLUME = 3;
}

enum Period {
    PERIOD_NONE = 0;

    //
    // Day is used to aggregate statistic over one day period.
    DAY = 1;

    //
    // Week is used to aggregate statistic over one week period.
    WEEK = 2;

    //
    // Month is used to aggregate statistic over one month period.
    MONTH = 3;

    //
    // ThreeMonth is used to aggregate statistic over three month period.
    THREE_MONTH = 4;
}