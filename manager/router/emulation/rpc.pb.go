// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package emulation is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	SendPaymentRequest
	SendPaymentResponse
	OpenChannelRequest
	OpenChannelResponse
	CloseChannelRequest
	CloseChannelResponse
*/
package emulation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendPaymentRequest struct {
	FirstUser  uint64 `protobuf:"varint,1,opt,name=first_user,json=firstUser" json:"first_user,omitempty"`
	SecondUser uint64 `protobuf:"varint,2,opt,name=second_user,json=secondUser" json:"second_user,omitempty"`
	Amount     uint64 `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Fee        uint64 `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
}

func (m *SendPaymentRequest) Reset()                    { *m = SendPaymentRequest{} }
func (m *SendPaymentRequest) String() string            { return proto.CompactTextString(m) }
func (*SendPaymentRequest) ProtoMessage()               {}
func (*SendPaymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendPaymentRequest) GetFirstUser() uint64 {
	if m != nil {
		return m.FirstUser
	}
	return 0
}

func (m *SendPaymentRequest) GetSecondUser() uint64 {
	if m != nil {
		return m.SecondUser
	}
	return 0
}

func (m *SendPaymentRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SendPaymentRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type SendPaymentResponse struct {
}

func (m *SendPaymentResponse) Reset()                    { *m = SendPaymentResponse{} }
func (m *SendPaymentResponse) String() string            { return proto.CompactTextString(m) }
func (*SendPaymentResponse) ProtoMessage()               {}
func (*SendPaymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type OpenChannelRequest struct {
	UserId       uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	LockedByUser uint64 `protobuf:"varint,2,opt,name=locked_by_user,json=lockedByUser" json:"locked_by_user,omitempty"`
	ChanId       uint64 `protobuf:"varint,3,opt,name=chan_id,json=chanId" json:"chan_id,omitempty"`
}

func (m *OpenChannelRequest) Reset()                    { *m = OpenChannelRequest{} }
func (m *OpenChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenChannelRequest) ProtoMessage()               {}
func (*OpenChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OpenChannelRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OpenChannelRequest) GetLockedByUser() uint64 {
	if m != nil {
		return m.LockedByUser
	}
	return 0
}

func (m *OpenChannelRequest) GetChanId() uint64 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

type OpenChannelResponse struct {
}

func (m *OpenChannelResponse) Reset()                    { *m = OpenChannelResponse{} }
func (m *OpenChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenChannelResponse) ProtoMessage()               {}
func (*OpenChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CloseChannelRequest struct {
	ChanId uint64 `protobuf:"varint,3,opt,name=chan_id,json=chanId" json:"chan_id,omitempty"`
}

func (m *CloseChannelRequest) Reset()                    { *m = CloseChannelRequest{} }
func (m *CloseChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseChannelRequest) ProtoMessage()               {}
func (*CloseChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CloseChannelRequest) GetChanId() uint64 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

type CloseChannelResponse struct {
}

func (m *CloseChannelResponse) Reset()                    { *m = CloseChannelResponse{} }
func (m *CloseChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseChannelResponse) ProtoMessage()               {}
func (*CloseChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*SendPaymentRequest)(nil), "emulation.SendPaymentRequest")
	proto.RegisterType((*SendPaymentResponse)(nil), "emulation.SendPaymentResponse")
	proto.RegisterType((*OpenChannelRequest)(nil), "emulation.OpenChannelRequest")
	proto.RegisterType((*OpenChannelResponse)(nil), "emulation.OpenChannelResponse")
	proto.RegisterType((*CloseChannelRequest)(nil), "emulation.CloseChannelRequest")
	proto.RegisterType((*CloseChannelResponse)(nil), "emulation.CloseChannelResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Emulator service

type EmulatorClient interface {
	//
	// SendPayment is used to emulate the activity of one user sending payment
	// to another within the local router network.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error)
	//
	// OpenChannel is used to emulate that user has opened the channel with the
	// router.
	OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error)
	//
	// CloseChannel is used to emulate that user has closed the channel with the
	// router.
	CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error)
}

type emulatorClient struct {
	cc *grpc.ClientConn
}

func NewEmulatorClient(cc *grpc.ClientConn) EmulatorClient {
	return &emulatorClient{cc}
}

func (c *emulatorClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error) {
	out := new(SendPaymentResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/SendPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error) {
	out := new(OpenChannelResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/OpenChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error) {
	out := new(CloseChannelResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/CloseChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Emulator service

type EmulatorServer interface {
	//
	// SendPayment is used to emulate the activity of one user sending payment
	// to another within the local router network.
	SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentResponse, error)
	//
	// OpenChannel is used to emulate that user has opened the channel with the
	// router.
	OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelResponse, error)
	//
	// CloseChannel is used to emulate that user has closed the channel with the
	// router.
	CloseChannel(context.Context, *CloseChannelRequest) (*CloseChannelResponse, error)
}

func RegisterEmulatorServer(s *grpc.Server, srv EmulatorServer) {
	s.RegisterService(&_Emulator_serviceDesc, srv)
}

func _Emulator_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/OpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).OpenChannel(ctx, req.(*OpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_CloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).CloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/CloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).CloseChannel(ctx, req.(*CloseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Emulator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emulation.Emulator",
	HandlerType: (*EmulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPayment",
			Handler:    _Emulator_SendPayment_Handler,
		},
		{
			MethodName: "OpenChannel",
			Handler:    _Emulator_OpenChannel_Handler,
		},
		{
			MethodName: "CloseChannel",
			Handler:    _Emulator_CloseChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x89, 0x2d, 0xa9, 0x99, 0x16, 0x91, 0xad, 0xb6, 0xa1, 0x50, 0x2b, 0xc1, 0x83, 0xa7,
	0x1c, 0xf4, 0x0d, 0x2c, 0x1e, 0x0a, 0x42, 0xa5, 0xe2, 0x39, 0xa4, 0xd9, 0x29, 0x0d, 0x26, 0xbb,
	0x71, 0x77, 0x73, 0xc8, 0xc5, 0xd7, 0xf6, 0x2a, 0xbb, 0x1b, 0x4b, 0x42, 0xd2, 0x5b, 0x66, 0xfe,
	0xc9, 0x3f, 0xdf, 0xcc, 0x2c, 0x78, 0xa2, 0x48, 0xc2, 0x42, 0x70, 0xc5, 0x89, 0x87, 0x79, 0x99,
	0xc5, 0x2a, 0xe5, 0x2c, 0xf8, 0x01, 0xf2, 0x81, 0x8c, 0xbe, 0xc7, 0x55, 0x8e, 0x4c, 0xed, 0xf0,
	0xbb, 0x44, 0xa9, 0xc8, 0x12, 0xe0, 0x90, 0x0a, 0xa9, 0xa2, 0x52, 0xa2, 0xf0, 0x9d, 0x7b, 0xe7,
	0x71, 0xb8, 0xf3, 0x4c, 0xe6, 0x53, 0xa2, 0x20, 0x2b, 0x18, 0x4b, 0x4c, 0x38, 0xa3, 0x56, 0xbf,
	0x30, 0x3a, 0xd8, 0x94, 0x29, 0x98, 0x81, 0x1b, 0xe7, 0xbc, 0x64, 0xca, 0x1f, 0x18, 0xad, 0x8e,
	0xc8, 0x35, 0x0c, 0x0e, 0x88, 0xfe, 0xd0, 0x24, 0xf5, 0x67, 0x70, 0x0b, 0xd3, 0x56, 0x7f, 0x59,
	0x70, 0x26, 0x31, 0xc8, 0x80, 0x6c, 0x0b, 0x64, 0xeb, 0x63, 0xcc, 0x18, 0x66, 0xff, 0x58, 0x73,
	0x18, 0xe9, 0x86, 0x51, 0x4a, 0x6b, 0x26, 0x57, 0x87, 0x1b, 0x4a, 0x1e, 0xe0, 0x2a, 0xe3, 0xc9,
	0x17, 0xd2, 0x68, 0x5f, 0x35, 0x99, 0x26, 0x36, 0xfb, 0x52, 0x19, 0xaa, 0x39, 0x8c, 0x92, 0x63,
	0xcc, 0xf4, 0xef, 0x35, 0x96, 0x0e, 0x37, 0x54, 0x43, 0xb4, 0xba, 0xd5, 0x10, 0x21, 0x4c, 0xd7,
	0x19, 0x97, 0xd8, 0xa5, 0xe8, 0xb7, 0x99, 0xc1, 0x4d, 0xbb, 0xde, 0xfa, 0x3c, 0xfd, 0x3a, 0x70,
	0xf9, 0x6a, 0x36, 0xce, 0x05, 0x79, 0x83, 0x71, 0x63, 0x60, 0xb2, 0x0c, 0x4f, 0xb7, 0x08, 0xbb,
	0x87, 0x58, 0xdc, 0x9d, 0x93, 0xad, 0xb5, 0x76, 0x6b, 0x90, 0xb7, 0xdc, 0xba, 0xfb, 0x6b, 0xb9,
	0xf5, 0x0c, 0x4c, 0xb6, 0x30, 0x69, 0x0e, 0x40, 0x9a, 0xf5, 0x3d, 0x9b, 0x58, 0xac, 0xce, 0xea,
	0xd6, 0x70, 0xef, 0x9a, 0xf7, 0xf6, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xde, 0x8e, 0xfe, 0xf7,
	0x7c, 0x02, 0x00, 0x00,
}
