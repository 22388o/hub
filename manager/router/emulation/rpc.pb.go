// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package emulation is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	SendPaymentRequest
	SendPaymentResponse
	OpenChannelRequest
	OpenChannelResponse
	CloseChannelRequest
	CloseChannelResponse
	SetBlockGenDurationRequest
	SetBlockGenDurationResponse
	SetBlockchainFeeRequest
	SetBlockchainFeeResponse
	SetUserConnectedRequest
	SetUserConnectedResponse
*/
package emulation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendPaymentRequest struct {
	// Sender is the id of user which sends the payment. If equals zero than we
	// believe that router is the sender.
	Sender string `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	// Receiver is the id of user who receive the payment. If equals zero than we
	// believe that router is the receiver.
	Receiver string `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	Amount   int64  `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
}

func (m *SendPaymentRequest) Reset()                    { *m = SendPaymentRequest{} }
func (m *SendPaymentRequest) String() string            { return proto.CompactTextString(m) }
func (*SendPaymentRequest) ProtoMessage()               {}
func (*SendPaymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendPaymentRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SendPaymentRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *SendPaymentRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type SendPaymentResponse struct {
}

func (m *SendPaymentResponse) Reset()                    { *m = SendPaymentResponse{} }
func (m *SendPaymentResponse) String() string            { return proto.CompactTextString(m) }
func (*SendPaymentResponse) ProtoMessage()               {}
func (*SendPaymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type OpenChannelRequest struct {
	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	LockedByUser int64  `protobuf:"varint,2,opt,name=locked_by_user,json=lockedByUser" json:"locked_by_user,omitempty"`
}

func (m *OpenChannelRequest) Reset()                    { *m = OpenChannelRequest{} }
func (m *OpenChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenChannelRequest) ProtoMessage()               {}
func (*OpenChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OpenChannelRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *OpenChannelRequest) GetLockedByUser() int64 {
	if m != nil {
		return m.LockedByUser
	}
	return 0
}

type OpenChannelResponse struct {
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (m *OpenChannelResponse) Reset()                    { *m = OpenChannelResponse{} }
func (m *OpenChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenChannelResponse) ProtoMessage()               {}
func (*OpenChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OpenChannelResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type CloseChannelRequest struct {
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (m *CloseChannelRequest) Reset()                    { *m = CloseChannelRequest{} }
func (m *CloseChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseChannelRequest) ProtoMessage()               {}
func (*CloseChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CloseChannelRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type CloseChannelResponse struct {
}

func (m *CloseChannelResponse) Reset()                    { *m = CloseChannelResponse{} }
func (m *CloseChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseChannelResponse) ProtoMessage()               {}
func (*CloseChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SetBlockGenDurationRequest struct {
	// Duration is the number of millisecond channel has to be in the locked
	// state after it openes or updates.
	Duration int64 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *SetBlockGenDurationRequest) Reset()                    { *m = SetBlockGenDurationRequest{} }
func (m *SetBlockGenDurationRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBlockGenDurationRequest) ProtoMessage()               {}
func (*SetBlockGenDurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetBlockGenDurationRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type SetBlockGenDurationResponse struct {
}

func (m *SetBlockGenDurationResponse) Reset()                    { *m = SetBlockGenDurationResponse{} }
func (m *SetBlockGenDurationResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBlockGenDurationResponse) ProtoMessage()               {}
func (*SetBlockGenDurationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SetBlockchainFeeRequest struct {
	// fee is the number expressed in satoshis, which blockchain takes for
	// making an computation, transaction creation, i.e. channel updates.
	// TODO(andrew.shvv) Make it real world friendly - calculate fee
	// depending on tx size and fee per kilobyte.
	Fee int64 `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
}

func (m *SetBlockchainFeeRequest) Reset()                    { *m = SetBlockchainFeeRequest{} }
func (m *SetBlockchainFeeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBlockchainFeeRequest) ProtoMessage()               {}
func (*SetBlockchainFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SetBlockchainFeeRequest) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type SetBlockchainFeeResponse struct {
}

func (m *SetBlockchainFeeResponse) Reset()                    { *m = SetBlockchainFeeResponse{} }
func (m *SetBlockchainFeeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBlockchainFeeResponse) ProtoMessage()               {}
func (*SetBlockchainFeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type SetUserConnectedRequest struct {
	IsOnline bool   `protobuf:"varint,1,opt,name=is_online,json=isOnline" json:"is_online,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *SetUserConnectedRequest) Reset()                    { *m = SetUserConnectedRequest{} }
func (m *SetUserConnectedRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUserConnectedRequest) ProtoMessage()               {}
func (*SetUserConnectedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SetUserConnectedRequest) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *SetUserConnectedRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type SetUserConnectedResponse struct {
}

func (m *SetUserConnectedResponse) Reset()                    { *m = SetUserConnectedResponse{} }
func (m *SetUserConnectedResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUserConnectedResponse) ProtoMessage()               {}
func (*SetUserConnectedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*SendPaymentRequest)(nil), "emulation.SendPaymentRequest")
	proto.RegisterType((*SendPaymentResponse)(nil), "emulation.SendPaymentResponse")
	proto.RegisterType((*OpenChannelRequest)(nil), "emulation.OpenChannelRequest")
	proto.RegisterType((*OpenChannelResponse)(nil), "emulation.OpenChannelResponse")
	proto.RegisterType((*CloseChannelRequest)(nil), "emulation.CloseChannelRequest")
	proto.RegisterType((*CloseChannelResponse)(nil), "emulation.CloseChannelResponse")
	proto.RegisterType((*SetBlockGenDurationRequest)(nil), "emulation.SetBlockGenDurationRequest")
	proto.RegisterType((*SetBlockGenDurationResponse)(nil), "emulation.SetBlockGenDurationResponse")
	proto.RegisterType((*SetBlockchainFeeRequest)(nil), "emulation.SetBlockchainFeeRequest")
	proto.RegisterType((*SetBlockchainFeeResponse)(nil), "emulation.SetBlockchainFeeResponse")
	proto.RegisterType((*SetUserConnectedRequest)(nil), "emulation.SetUserConnectedRequest")
	proto.RegisterType((*SetUserConnectedResponse)(nil), "emulation.SetUserConnectedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Emulator service

type EmulatorClient interface {
	//
	// SendPayment is used to emulate the activity of one user sending payment
	// to another within the local router network.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error)
	//
	// OpenChannel is used to emulate that user has opened the channel with the
	// router.
	OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error)
	//
	// CloseChannel is used to emulate that user has closed the channel with the
	// router.
	CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error)
	//
	// SetUserConnected set user being offline or online, which means that all his
	// openned channels either could or could't be used for receiving and
	// sending payments.
	SetUserConnected(ctx context.Context, in *SetUserConnectedRequest, opts ...grpc.CallOption) (*SetUserConnectedResponse, error)
	//
	// SetBlockGenDuration is used to set the time which is needed for blokc
	// to be generatedtime. This would impact channel creation, channel
	// update and channel close.
	SetBlockGenDuration(ctx context.Context, in *SetBlockGenDurationRequest, opts ...grpc.CallOption) (*SetBlockGenDurationResponse, error)
	//
	// SetBlockchainFee is used to set the fee which blockchain takes for
	// making an computation, transaction creation, i.e. channel updates.
	SetBlockchainFee(ctx context.Context, in *SetBlockchainFeeRequest, opts ...grpc.CallOption) (*SetBlockchainFeeResponse, error)
}

type emulatorClient struct {
	cc *grpc.ClientConn
}

func NewEmulatorClient(cc *grpc.ClientConn) EmulatorClient {
	return &emulatorClient{cc}
}

func (c *emulatorClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error) {
	out := new(SendPaymentResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/SendPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error) {
	out := new(OpenChannelResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/OpenChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error) {
	out := new(CloseChannelResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/CloseChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) SetUserConnected(ctx context.Context, in *SetUserConnectedRequest, opts ...grpc.CallOption) (*SetUserConnectedResponse, error) {
	out := new(SetUserConnectedResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/SetUserConnected", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) SetBlockGenDuration(ctx context.Context, in *SetBlockGenDurationRequest, opts ...grpc.CallOption) (*SetBlockGenDurationResponse, error) {
	out := new(SetBlockGenDurationResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/SetBlockGenDuration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) SetBlockchainFee(ctx context.Context, in *SetBlockchainFeeRequest, opts ...grpc.CallOption) (*SetBlockchainFeeResponse, error) {
	out := new(SetBlockchainFeeResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/SetBlockchainFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Emulator service

type EmulatorServer interface {
	//
	// SendPayment is used to emulate the activity of one user sending payment
	// to another within the local router network.
	SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentResponse, error)
	//
	// OpenChannel is used to emulate that user has opened the channel with the
	// router.
	OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelResponse, error)
	//
	// CloseChannel is used to emulate that user has closed the channel with the
	// router.
	CloseChannel(context.Context, *CloseChannelRequest) (*CloseChannelResponse, error)
	//
	// SetUserConnected set user being offline or online, which means that all his
	// openned channels either could or could't be used for receiving and
	// sending payments.
	SetUserConnected(context.Context, *SetUserConnectedRequest) (*SetUserConnectedResponse, error)
	//
	// SetBlockGenDuration is used to set the time which is needed for blokc
	// to be generatedtime. This would impact channel creation, channel
	// update and channel close.
	SetBlockGenDuration(context.Context, *SetBlockGenDurationRequest) (*SetBlockGenDurationResponse, error)
	//
	// SetBlockchainFee is used to set the fee which blockchain takes for
	// making an computation, transaction creation, i.e. channel updates.
	SetBlockchainFee(context.Context, *SetBlockchainFeeRequest) (*SetBlockchainFeeResponse, error)
}

func RegisterEmulatorServer(s *grpc.Server, srv EmulatorServer) {
	s.RegisterService(&_Emulator_serviceDesc, srv)
}

func _Emulator_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/OpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).OpenChannel(ctx, req.(*OpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_CloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).CloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/CloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).CloseChannel(ctx, req.(*CloseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_SetUserConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).SetUserConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/SetUserConnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).SetUserConnected(ctx, req.(*SetUserConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_SetBlockGenDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockGenDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).SetBlockGenDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/SetBlockGenDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).SetBlockGenDuration(ctx, req.(*SetBlockGenDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_SetBlockchainFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockchainFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).SetBlockchainFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/SetBlockchainFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).SetBlockchainFee(ctx, req.(*SetBlockchainFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Emulator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emulation.Emulator",
	HandlerType: (*EmulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPayment",
			Handler:    _Emulator_SendPayment_Handler,
		},
		{
			MethodName: "OpenChannel",
			Handler:    _Emulator_OpenChannel_Handler,
		},
		{
			MethodName: "CloseChannel",
			Handler:    _Emulator_CloseChannel_Handler,
		},
		{
			MethodName: "SetUserConnected",
			Handler:    _Emulator_SetUserConnected_Handler,
		},
		{
			MethodName: "SetBlockGenDuration",
			Handler:    _Emulator_SetBlockGenDuration_Handler,
		},
		{
			MethodName: "SetBlockchainFee",
			Handler:    _Emulator_SetBlockchainFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4d, 0x6b, 0xdc, 0x30,
	0x10, 0x86, 0xd9, 0x38, 0xa4, 0xf6, 0x24, 0x94, 0xa0, 0xb4, 0x89, 0x51, 0xd8, 0x36, 0xb8, 0x1f,
	0x04, 0x0a, 0x7b, 0x68, 0x7b, 0xe8, 0x39, 0xdb, 0x0f, 0x02, 0x01, 0x17, 0x2f, 0x3d, 0xf5, 0xe0,
	0x3a, 0xd6, 0x94, 0x98, 0x7a, 0x25, 0x57, 0xb2, 0x0b, 0xfb, 0x4b, 0xfa, 0x77, 0x8b, 0x64, 0x79,
	0xb1, 0x6c, 0x6f, 0xf7, 0xb6, 0x33, 0x9a, 0x79, 0x46, 0xa3, 0xf7, 0x5d, 0x43, 0x20, 0xab, 0x7c,
	0x51, 0x49, 0x51, 0x0b, 0x12, 0xe0, 0xba, 0x29, 0xb3, 0xba, 0x10, 0x3c, 0xfa, 0x01, 0x64, 0x85,
	0x9c, 0x7d, 0xcd, 0x36, 0x6b, 0xe4, 0x75, 0x82, 0xbf, 0x1b, 0x54, 0x35, 0x39, 0x87, 0x23, 0x85,
	0x9c, 0xa1, 0x0c, 0x67, 0x57, 0xb3, 0xeb, 0x20, 0xb1, 0x11, 0xa1, 0xe0, 0x4b, 0xcc, 0xb1, 0xf8,
	0x83, 0x32, 0x3c, 0x30, 0x27, 0xdb, 0x58, 0xf7, 0x64, 0x6b, 0xd1, 0xf0, 0x3a, 0x3c, 0xbc, 0x9a,
	0x5d, 0x7b, 0x89, 0x8d, 0xa2, 0xa7, 0x70, 0xe6, 0x4c, 0x50, 0x95, 0xe0, 0x0a, 0xa3, 0x15, 0x90,
	0xb8, 0x42, 0xbe, 0x7c, 0xc8, 0x38, 0xc7, 0xb2, 0x1b, 0x7c, 0x01, 0x8f, 0x1a, 0x85, 0x32, 0x2d,
	0x58, 0x37, 0x59, 0x87, 0xb7, 0x8c, 0xbc, 0x84, 0xc7, 0xa5, 0xc8, 0x7f, 0x21, 0x4b, 0xef, 0x37,
	0xa9, 0xce, 0x99, 0xf9, 0x5e, 0x72, 0xd2, 0x66, 0x6f, 0x36, 0xdf, 0x14, 0xca, 0xe8, 0x3d, 0x9c,
	0x39, 0xd0, 0x76, 0x16, 0x99, 0x03, 0xe4, 0x6d, 0x4a, 0x83, 0x3d, 0x03, 0x0e, 0x6c, 0xe6, 0x96,
	0xe9, 0xae, 0x65, 0x29, 0x14, 0x0e, 0xee, 0xb2, 0xa7, 0xeb, 0x1c, 0x9e, 0xb8, 0x5d, 0x76, 0xb1,
	0x0f, 0x40, 0x57, 0x58, 0xdf, 0xe8, 0x7b, 0x7d, 0x41, 0xfe, 0xb1, 0x91, 0xe6, 0xa1, 0x3b, 0x28,
	0x05, 0x9f, 0xd9, 0x94, 0x41, 0x7a, 0xc9, 0x36, 0x8e, 0xe6, 0x70, 0x39, 0xd9, 0x69, 0xc1, 0x6f,
	0xe0, 0xa2, 0x3b, 0xce, 0x1f, 0xb2, 0x82, 0x7f, 0x46, 0xec, 0xa8, 0xa7, 0xe0, 0xfd, 0x44, 0xb4,
	0x40, 0xfd, 0x33, 0xa2, 0x10, 0x8e, 0x8b, 0x2d, 0x28, 0x36, 0x20, 0xfd, 0x60, 0x4b, 0xc1, 0x39,
	0xe6, 0x35, 0xb2, 0x0e, 0x74, 0x09, 0x41, 0xa1, 0x52, 0xc1, 0xcb, 0x82, 0xa3, 0x51, 0xc0, 0x4f,
	0xfc, 0x42, 0xc5, 0x26, 0xee, 0x8b, 0x73, 0xd0, 0x17, 0xc7, 0x0e, 0x1b, 0x00, 0xdb, 0x61, 0x6f,
	0xff, 0x1e, 0x82, 0xff, 0xc9, 0xd8, 0x4d, 0x48, 0x72, 0x07, 0xc7, 0x3d, 0x2f, 0x90, 0xf9, 0x62,
	0x6b, 0xc4, 0xc5, 0xd8, 0x85, 0xf4, 0xd9, 0xae, 0x63, 0x2b, 0xeb, 0x1d, 0x1c, 0xf7, 0xd4, 0x76,
	0x68, 0x63, 0x6b, 0x39, 0xb4, 0x29, 0x93, 0xc4, 0x70, 0xd2, 0xd7, 0x93, 0xf4, 0xeb, 0x27, 0xec,
	0x41, 0x9f, 0xef, 0x3c, 0xb7, 0xc0, 0xef, 0x70, 0x3a, 0x7c, 0x15, 0x12, 0x39, 0x2b, 0x4d, 0x6a,
	0x40, 0x5f, 0xfc, 0xb7, 0xc6, 0xc2, 0x99, 0xfe, 0x57, 0x8d, 0xbc, 0x42, 0x5e, 0xb9, 0xbd, 0x3b,
	0x5c, 0x48, 0x5f, 0xef, 0x2b, 0x73, 0x56, 0x70, 0x5c, 0x34, 0x5c, 0x61, 0xca, 0x8f, 0xc3, 0x15,
	0x26, 0x6d, 0x78, 0x7f, 0x64, 0x3e, 0x46, 0xef, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x08, 0x3a,
	0x01, 0x69, 0x99, 0x04, 0x00, 0x00,
}
