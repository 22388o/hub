// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package emulation is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	SendPaymentRequest
	SendPaymentResponse
	OpenChannelRequest
	OpenChannelResponse
	CloseChannelRequest
	CloseChannelResponse
	SetBlockGenDurationRequest
	SetBlockGenDurationResponse
*/
package emulation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendPaymentRequest struct {
	// Sender is the id of user which sends the payment. If equals zero than we
	// believe that router is the sender.
	Sender string `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	// Receiver is the id of user who receive the payment. If equals zero than we
	// believe that router is the receiver.
	Receiver string `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	Amount   uint64 `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
}

func (m *SendPaymentRequest) Reset()                    { *m = SendPaymentRequest{} }
func (m *SendPaymentRequest) String() string            { return proto.CompactTextString(m) }
func (*SendPaymentRequest) ProtoMessage()               {}
func (*SendPaymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendPaymentRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SendPaymentRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *SendPaymentRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type SendPaymentResponse struct {
}

func (m *SendPaymentResponse) Reset()                    { *m = SendPaymentResponse{} }
func (m *SendPaymentResponse) String() string            { return proto.CompactTextString(m) }
func (*SendPaymentResponse) ProtoMessage()               {}
func (*SendPaymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type OpenChannelRequest struct {
	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	LockedByUser uint64 `protobuf:"varint,2,opt,name=locked_by_user,json=lockedByUser" json:"locked_by_user,omitempty"`
}

func (m *OpenChannelRequest) Reset()                    { *m = OpenChannelRequest{} }
func (m *OpenChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenChannelRequest) ProtoMessage()               {}
func (*OpenChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OpenChannelRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *OpenChannelRequest) GetLockedByUser() uint64 {
	if m != nil {
		return m.LockedByUser
	}
	return 0
}

type OpenChannelResponse struct {
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (m *OpenChannelResponse) Reset()                    { *m = OpenChannelResponse{} }
func (m *OpenChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenChannelResponse) ProtoMessage()               {}
func (*OpenChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OpenChannelResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type CloseChannelRequest struct {
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (m *CloseChannelRequest) Reset()                    { *m = CloseChannelRequest{} }
func (m *CloseChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseChannelRequest) ProtoMessage()               {}
func (*CloseChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CloseChannelRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type CloseChannelResponse struct {
}

func (m *CloseChannelResponse) Reset()                    { *m = CloseChannelResponse{} }
func (m *CloseChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseChannelResponse) ProtoMessage()               {}
func (*CloseChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SetBlockGenDurationRequest struct {
	// Duration is the number of millisecond channel has to be in the locked
	// state after it openes or updates.
	Duration int64 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *SetBlockGenDurationRequest) Reset()                    { *m = SetBlockGenDurationRequest{} }
func (m *SetBlockGenDurationRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBlockGenDurationRequest) ProtoMessage()               {}
func (*SetBlockGenDurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetBlockGenDurationRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type SetBlockGenDurationResponse struct {
}

func (m *SetBlockGenDurationResponse) Reset()                    { *m = SetBlockGenDurationResponse{} }
func (m *SetBlockGenDurationResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBlockGenDurationResponse) ProtoMessage()               {}
func (*SetBlockGenDurationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*SendPaymentRequest)(nil), "emulation.SendPaymentRequest")
	proto.RegisterType((*SendPaymentResponse)(nil), "emulation.SendPaymentResponse")
	proto.RegisterType((*OpenChannelRequest)(nil), "emulation.OpenChannelRequest")
	proto.RegisterType((*OpenChannelResponse)(nil), "emulation.OpenChannelResponse")
	proto.RegisterType((*CloseChannelRequest)(nil), "emulation.CloseChannelRequest")
	proto.RegisterType((*CloseChannelResponse)(nil), "emulation.CloseChannelResponse")
	proto.RegisterType((*SetBlockGenDurationRequest)(nil), "emulation.SetBlockGenDurationRequest")
	proto.RegisterType((*SetBlockGenDurationResponse)(nil), "emulation.SetBlockGenDurationResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Emulator service

type EmulatorClient interface {
	//
	// SendPayment is used to emulate the activity of one user sending payment
	// to another within the local router network.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error)
	//
	// OpenChannel is used to emulate that user has opened the channel with the
	// router.
	OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error)
	//
	// CloseChannel is used to emulate that user has closed the channel with the
	// router.
	CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error)
	//
	// SetBlockGenDuration is used to set the time which is needed for blokc
	// to be generatedtime. This would impact channel creation, channel
	// update and channel close.
	SetBlockGenDuration(ctx context.Context, in *SetBlockGenDurationRequest, opts ...grpc.CallOption) (*SetBlockGenDurationResponse, error)
}

type emulatorClient struct {
	cc *grpc.ClientConn
}

func NewEmulatorClient(cc *grpc.ClientConn) EmulatorClient {
	return &emulatorClient{cc}
}

func (c *emulatorClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error) {
	out := new(SendPaymentResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/SendPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error) {
	out := new(OpenChannelResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/OpenChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error) {
	out := new(CloseChannelResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/CloseChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emulatorClient) SetBlockGenDuration(ctx context.Context, in *SetBlockGenDurationRequest, opts ...grpc.CallOption) (*SetBlockGenDurationResponse, error) {
	out := new(SetBlockGenDurationResponse)
	err := grpc.Invoke(ctx, "/emulation.Emulator/SetBlockGenDuration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Emulator service

type EmulatorServer interface {
	//
	// SendPayment is used to emulate the activity of one user sending payment
	// to another within the local router network.
	SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentResponse, error)
	//
	// OpenChannel is used to emulate that user has opened the channel with the
	// router.
	OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelResponse, error)
	//
	// CloseChannel is used to emulate that user has closed the channel with the
	// router.
	CloseChannel(context.Context, *CloseChannelRequest) (*CloseChannelResponse, error)
	//
	// SetBlockGenDuration is used to set the time which is needed for blokc
	// to be generatedtime. This would impact channel creation, channel
	// update and channel close.
	SetBlockGenDuration(context.Context, *SetBlockGenDurationRequest) (*SetBlockGenDurationResponse, error)
}

func RegisterEmulatorServer(s *grpc.Server, srv EmulatorServer) {
	s.RegisterService(&_Emulator_serviceDesc, srv)
}

func _Emulator_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/OpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).OpenChannel(ctx, req.(*OpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_CloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).CloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/CloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).CloseChannel(ctx, req.(*CloseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emulator_SetBlockGenDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockGenDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmulatorServer).SetBlockGenDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emulation.Emulator/SetBlockGenDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmulatorServer).SetBlockGenDuration(ctx, req.(*SetBlockGenDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Emulator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emulation.Emulator",
	HandlerType: (*EmulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPayment",
			Handler:    _Emulator_SendPayment_Handler,
		},
		{
			MethodName: "OpenChannel",
			Handler:    _Emulator_OpenChannel_Handler,
		},
		{
			MethodName: "CloseChannel",
			Handler:    _Emulator_CloseChannel_Handler,
		},
		{
			MethodName: "SetBlockGenDuration",
			Handler:    _Emulator_SetBlockGenDuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcf, 0x4f, 0xc2, 0x30,
	0x18, 0x0d, 0x3f, 0x82, 0xec, 0x83, 0x78, 0x28, 0x8a, 0x64, 0x06, 0x25, 0x8b, 0x1a, 0x4e, 0x1c,
	0xd4, 0x83, 0x67, 0xd0, 0x18, 0x12, 0x12, 0xcc, 0x88, 0x67, 0x1c, 0xeb, 0x97, 0x48, 0x1c, 0xed,
	0x6c, 0x3b, 0x13, 0xfe, 0x58, 0xff, 0x17, 0xd3, 0xae, 0x90, 0x55, 0x20, 0x1c, 0xdf, 0xfb, 0xfa,
	0xde, 0x6b, 0xdf, 0xb7, 0x81, 0x27, 0xd2, 0x78, 0x90, 0x0a, 0xae, 0x38, 0xf1, 0x70, 0x95, 0x25,
	0x91, 0x5a, 0x72, 0x16, 0x7c, 0x00, 0x99, 0x21, 0xa3, 0x6f, 0xd1, 0x7a, 0x85, 0x4c, 0x85, 0xf8,
	0x9d, 0xa1, 0x54, 0xa4, 0x0d, 0x35, 0x89, 0x8c, 0xa2, 0xe8, 0x94, 0x7a, 0xa5, 0xbe, 0x17, 0x5a,
	0x44, 0x7c, 0xa8, 0x0b, 0x8c, 0x71, 0xf9, 0x83, 0xa2, 0x53, 0x36, 0x93, 0x2d, 0xd6, 0x9a, 0x68,
	0xc5, 0x33, 0xa6, 0x3a, 0xd5, 0x5e, 0xa9, 0x5f, 0x0d, 0x2d, 0x0a, 0xce, 0xa1, 0xe5, 0x24, 0xc8,
	0x94, 0x33, 0x89, 0xc1, 0x0c, 0xc8, 0x34, 0x45, 0x36, 0xfa, 0x8c, 0x18, 0xc3, 0x64, 0x13, 0x7c,
	0x01, 0x27, 0x99, 0x44, 0x31, 0x5f, 0xd2, 0x4d, 0xb2, 0x86, 0x63, 0x4a, 0x6e, 0xe0, 0x34, 0xe1,
	0xf1, 0x17, 0xd2, 0xf9, 0x62, 0x3d, 0xd7, 0x9c, 0xc9, 0xaf, 0x86, 0xcd, 0x9c, 0x1d, 0xae, 0xdf,
	0x25, 0x8a, 0xe0, 0x11, 0x5a, 0x8e, 0x69, 0x9e, 0x45, 0xba, 0x00, 0x71, 0x4e, 0x69, 0xe3, 0x8a,
	0x31, 0xf6, 0x2c, 0x33, 0xa6, 0x5a, 0x35, 0x4a, 0xb8, 0xc4, 0x7f, 0x77, 0x39, 0xa2, 0x6a, 0xc3,
	0x99, 0xab, 0xb2, 0x0f, 0x7b, 0x02, 0x7f, 0x86, 0x6a, 0xa8, 0xef, 0xf5, 0x8a, 0xec, 0x39, 0x13,
	0xa6, 0xe8, 0x8d, 0xa9, 0x0f, 0x75, 0x6a, 0x29, 0x63, 0x59, 0x09, 0xb7, 0x38, 0xe8, 0xc2, 0xe5,
	0x5e, 0x65, 0x6e, 0x7c, 0xff, 0x5b, 0x86, 0xfa, 0x8b, 0x59, 0x1c, 0x17, 0x64, 0x02, 0x8d, 0x42,
	0xab, 0xa4, 0x3b, 0xd8, 0xae, 0x74, 0xb0, 0xbb, 0x4f, 0xff, 0xea, 0xd0, 0xd8, 0x16, 0x34, 0x81,
	0x46, 0xa1, 0x37, 0xc7, 0x6d, 0x77, 0x49, 0x8e, 0xdb, 0xbe, 0xba, 0xa7, 0xd0, 0x2c, 0x36, 0x43,
	0x8a, 0xe7, 0xf7, 0x14, 0xed, 0x5f, 0x1f, 0x9c, 0x5b, 0x43, 0xaa, 0x3f, 0xa1, 0x9d, 0x62, 0xc8,
	0xad, 0xf3, 0xaa, 0x43, 0x95, 0xfb, 0x77, 0xc7, 0x8e, 0xe5, 0x29, 0x8b, 0x9a, 0xf9, 0x39, 0x1e,
	0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x49, 0x4a, 0x9a, 0x29, 0x03, 0x00, 0x00,
}
