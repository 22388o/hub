// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

/*
Package logs is a generated protocol buffer package.

It is generated from these files:
	log.proto

It has these top-level messages:
	Log
	RouterState
	Channel
	Payment
	ChannelChange
*/
package logs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PaymentStatus int32

const (
	PaymentStatus_success PaymentStatus = 0
	// UnsufficientFunds means that router haven't posses/locked enough funds
	// with receiver user to route thouth the payment.
	PaymentStatus_unsufficient_funds PaymentStatus = 1
	// ExternalFail means that receiver failed to receive payment because of
	// the unknown to us reason.
	PaymentStatus_external_fail PaymentStatus = 2
)

var PaymentStatus_name = map[int32]string{
	0: "success",
	1: "unsufficient_funds",
	2: "external_fail",
}
var PaymentStatus_value = map[string]int32{
	"success":            0,
	"unsufficient_funds": 1,
	"external_fail":      2,
}

func (x PaymentStatus) String() string {
	return proto.EnumName(PaymentStatus_name, int32(x))
}
func (PaymentStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ChannelChangeType represent the type of action which were attempted to
// apply to the channel.
type ChannelChangeType int32

const (
	// Open is used when this channel was just created, and haven't been in
	// local network before
	ChannelChangeType_open ChannelChangeType = 0
	// Close is used when number locked funds / balances of both channel
	// participant equal to zero.
	ChannelChangeType_close ChannelChangeType = 1
	// Udpate is used when one of the participants decides to update its
	// channel balance.
	ChannelChangeType_udpate ChannelChangeType = 2
)

var ChannelChangeType_name = map[int32]string{
	0: "open",
	1: "close",
	2: "udpate",
}
var ChannelChangeType_value = map[string]int32{
	"open":   0,
	"close":  1,
	"udpate": 2,
}

func (x ChannelChangeType) String() string {
	return proto.EnumName(ChannelChangeType_name, int32(x))
}
func (ChannelChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Log is the main object in the file which represent the log entry in the
// log file.
type Log struct {
	Time int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Log_State
	//	*Log_Payment
	//	*Log_ChannelChange
	Data isLog_Data `protobuf_oneof:"data"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isLog_Data interface {
	isLog_Data()
}

type Log_State struct {
	State *RouterState `protobuf:"bytes,3,opt,name=state,oneof"`
}
type Log_Payment struct {
	Payment *Payment `protobuf:"bytes,4,opt,name=payment,oneof"`
}
type Log_ChannelChange struct {
	ChannelChange *ChannelChange `protobuf:"bytes,5,opt,name=channel_change,json=channelChange,oneof"`
}

func (*Log_State) isLog_Data()         {}
func (*Log_Payment) isLog_Data()       {}
func (*Log_ChannelChange) isLog_Data() {}

func (m *Log) GetData() isLog_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Log) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Log) GetState() *RouterState {
	if x, ok := m.GetData().(*Log_State); ok {
		return x.State
	}
	return nil
}

func (m *Log) GetPayment() *Payment {
	if x, ok := m.GetData().(*Log_Payment); ok {
		return x.Payment
	}
	return nil
}

func (m *Log) GetChannelChange() *ChannelChange {
	if x, ok := m.GetData().(*Log_ChannelChange); ok {
		return x.ChannelChange
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Log) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Log_OneofMarshaler, _Log_OneofUnmarshaler, _Log_OneofSizer, []interface{}{
		(*Log_State)(nil),
		(*Log_Payment)(nil),
		(*Log_ChannelChange)(nil),
	}
}

func _Log_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Log)
	// data
	switch x := m.Data.(type) {
	case *Log_State:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.State); err != nil {
			return err
		}
	case *Log_Payment:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Payment); err != nil {
			return err
		}
	case *Log_ChannelChange:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChannelChange); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Log.Data has unexpected type %T", x)
	}
	return nil
}

func _Log_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Log)
	switch tag {
	case 3: // data.state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouterState)
		err := b.DecodeMessage(msg)
		m.Data = &Log_State{msg}
		return true, err
	case 4: // data.payment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Payment)
		err := b.DecodeMessage(msg)
		m.Data = &Log_Payment{msg}
		return true, err
	case 5: // data.channel_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChannelChange)
		err := b.DecodeMessage(msg)
		m.Data = &Log_ChannelChange{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Log_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Log)
	// data
	switch x := m.Data.(type) {
	case *Log_State:
		s := proto.Size(x.State)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Log_Payment:
		s := proto.Size(x.Payment)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Log_ChannelChange:
		s := proto.Size(x.ChannelChange)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RouterState is a type of log entry which describes the state/view of the
// router local lightning network and number of free funds which exist under
// control router.
type RouterState struct {
	// Channels represent the local lightning network topology.
	Channels []*Channel `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	// FreeBalance it is free number of funds under router managment which
	// could be used to lock them in the channels.
	FreeBalance uint64 `protobuf:"varint,2,opt,name=free_balance,json=freeBalance" json:"free_balance,omitempty"`
}

func (m *RouterState) Reset()                    { *m = RouterState{} }
func (m *RouterState) String() string            { return proto.CompactTextString(m) }
func (*RouterState) ProtoMessage()               {}
func (*RouterState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RouterState) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *RouterState) GetFreeBalance() uint64 {
	if m != nil {
		return m.FreeBalance
	}
	return 0
}

// Channel is used as the building block in describing of the lightning
// network topology.
type Channel struct {
	UserId        uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserBalance   uint64 `protobuf:"varint,2,opt,name=user_balance,json=userBalance" json:"user_balance,omitempty"`
	RouterBalance uint64 `protobuf:"varint,3,opt,name=router_balance,json=routerBalance" json:"router_balance,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Channel) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Channel) GetUserBalance() uint64 {
	if m != nil {
		return m.UserBalance
	}
	return 0
}

func (m *Channel) GetRouterBalance() uint64 {
	if m != nil {
		return m.RouterBalance
	}
	return 0
}

// Payment represent the attempt of peer in the local lightning network to
// send the payment to some another peer in the network.
type Payment struct {
	Status   PaymentStatus `protobuf:"varint,1,opt,name=status,enum=logs.PaymentStatus" json:"status,omitempty"`
	Sender   uint64        `protobuf:"varint,2,opt,name=sender" json:"sender,omitempty"`
	Receiver uint64        `protobuf:"varint,3,opt,name=receiver" json:"receiver,omitempty"`
	ChanId   uint64        `protobuf:"varint,4,opt,name=chan_id,json=chanId" json:"chan_id,omitempty"`
	Amount   uint64        `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	// Earned is the number of funds which router earned by making this payment.
	// In case of rebalncing router will pay the fee, for that reason this
	// number will be negative.
	Earned int64 `protobuf:"varint,6,opt,name=earned" json:"earned,omitempty"`
}

func (m *Payment) Reset()                    { *m = Payment{} }
func (m *Payment) String() string            { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()               {}
func (*Payment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Payment) GetStatus() PaymentStatus {
	if m != nil {
		return m.Status
	}
	return PaymentStatus_success
}

func (m *Payment) GetSender() uint64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *Payment) GetReceiver() uint64 {
	if m != nil {
		return m.Receiver
	}
	return 0
}

func (m *Payment) GetChanId() uint64 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *Payment) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Payment) GetEarned() int64 {
	if m != nil {
		return m.Earned
	}
	return 0
}

type ChannelChange struct {
	Type                ChannelChangeType `protobuf:"varint,1,opt,name=type,enum=logs.ChannelChangeType" json:"type,omitempty"`
	UserId              uint64            `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChangeUserBalance   uint64            `protobuf:"varint,3,opt,name=change_user_balance,json=changeUserBalance" json:"change_user_balance,omitempty"`
	ChangeRouterBalance uint64            `protobuf:"varint,4,opt,name=change_router_balance,json=changeRouterBalance" json:"change_router_balance,omitempty"`
	UserBalance         uint64            `protobuf:"varint,5,opt,name=user_balance,json=userBalance" json:"user_balance,omitempty"`
	RouterBalance       uint64            `protobuf:"varint,6,opt,name=router_balance,json=routerBalance" json:"router_balance,omitempty"`
	// Fee which was taken by blockchain decentrilized computer / mainers or
	// some other form of smart contract manager.
	Fee uint64 `protobuf:"varint,7,opt,name=fee" json:"fee,omitempty"`
}

func (m *ChannelChange) Reset()                    { *m = ChannelChange{} }
func (m *ChannelChange) String() string            { return proto.CompactTextString(m) }
func (*ChannelChange) ProtoMessage()               {}
func (*ChannelChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChannelChange) GetType() ChannelChangeType {
	if m != nil {
		return m.Type
	}
	return ChannelChangeType_open
}

func (m *ChannelChange) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelChange) GetChangeUserBalance() uint64 {
	if m != nil {
		return m.ChangeUserBalance
	}
	return 0
}

func (m *ChannelChange) GetChangeRouterBalance() uint64 {
	if m != nil {
		return m.ChangeRouterBalance
	}
	return 0
}

func (m *ChannelChange) GetUserBalance() uint64 {
	if m != nil {
		return m.UserBalance
	}
	return 0
}

func (m *ChannelChange) GetRouterBalance() uint64 {
	if m != nil {
		return m.RouterBalance
	}
	return 0
}

func (m *ChannelChange) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func init() {
	proto.RegisterType((*Log)(nil), "logs.Log")
	proto.RegisterType((*RouterState)(nil), "logs.RouterState")
	proto.RegisterType((*Channel)(nil), "logs.Channel")
	proto.RegisterType((*Payment)(nil), "logs.Payment")
	proto.RegisterType((*ChannelChange)(nil), "logs.ChannelChange")
	proto.RegisterEnum("logs.PaymentStatus", PaymentStatus_name, PaymentStatus_value)
	proto.RegisterEnum("logs.ChannelChangeType", ChannelChangeType_name, ChannelChangeType_value)
}

func init() { proto.RegisterFile("log.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x63, 0xc7, 0x6e, 0x6f, 0x3e, 0x57, 0xce, 0xad, 0xbe, 0xd6, 0x62, 0x15, 0x22, 0x21,
	0x25, 0xad, 0x94, 0x45, 0x61, 0xc9, 0xaa, 0x5d, 0x90, 0x4a, 0x2c, 0xd0, 0x14, 0x56, 0x2c, 0xac,
	0xa9, 0x7d, 0x1d, 0x2c, 0x39, 0x63, 0xcb, 0x33, 0x46, 0xe4, 0x41, 0x78, 0x12, 0xc4, 0xfb, 0xa1,
	0xf9, 0x49, 0x48, 0xda, 0x2e, 0x58, 0xc5, 0xf7, 0x9e, 0x73, 0xff, 0xce, 0x99, 0xc0, 0x69, 0xdd,
	0xac, 0x97, 0x6d, 0xd7, 0xa8, 0x06, 0x83, 0xba, 0x59, 0xcb, 0xd9, 0x6f, 0x0f, 0xfc, 0x8f, 0xcd,
	0x1a, 0x11, 0x02, 0x55, 0x6d, 0x28, 0xf5, 0xa6, 0xde, 0xdc, 0x67, 0xe6, 0x1b, 0x17, 0x30, 0x92,
	0x8a, 0x2b, 0x4a, 0xfd, 0xa9, 0x37, 0x1f, 0xdf, 0x4c, 0x96, 0xba, 0x62, 0xc9, 0x9a, 0x5e, 0x51,
	0xf7, 0xa0, 0x81, 0xd5, 0x80, 0x59, 0x06, 0x2e, 0x20, 0x6a, 0xf9, 0x76, 0x43, 0x42, 0xa5, 0x81,
	0x21, 0xc7, 0x96, 0xfc, 0xc9, 0x26, 0x57, 0x03, 0xb6, 0xc3, 0xf1, 0x3d, 0x9c, 0xe5, 0xdf, 0xb8,
	0x10, 0x54, 0x67, 0xfa, 0x77, 0x4d, 0xe9, 0xc8, 0x54, 0x9c, 0xdb, 0x8a, 0x3b, 0x8b, 0xdd, 0x19,
	0x68, 0x35, 0x60, 0x71, 0x7e, 0x98, 0xb8, 0x0d, 0x21, 0x28, 0xb8, 0xe2, 0xb3, 0xaf, 0x30, 0x3e,
	0x58, 0x04, 0x17, 0x70, 0xe2, 0x78, 0x32, 0xf5, 0xa6, 0xfe, 0xdf, 0x05, 0x5c, 0x3b, 0xb6, 0x87,
	0xf1, 0x35, 0xfc, 0x57, 0x76, 0x44, 0xd9, 0x23, 0xaf, 0xb9, 0xc8, 0x29, 0x1d, 0x4e, 0xbd, 0x79,
	0xc0, 0xc6, 0x3a, 0x77, 0x6b, 0x53, 0xb3, 0x1a, 0x22, 0x57, 0x87, 0x97, 0x10, 0xf5, 0x92, 0xba,
	0xac, 0x2a, 0x8c, 0x34, 0x01, 0x0b, 0x75, 0x78, 0x5f, 0xe8, 0x36, 0x06, 0x78, 0xd2, 0x46, 0xe7,
	0x5c, 0x1b, 0x7c, 0x03, 0x67, 0x9d, 0xd9, 0x71, 0x4f, 0xf2, 0x0d, 0x29, 0xb6, 0xd9, 0xdd, 0xb4,
	0x5f, 0x1e, 0x44, 0x4e, 0x27, 0xbc, 0x86, 0x50, 0x0b, 0xda, 0x4b, 0x33, 0xed, 0x6c, 0x27, 0x8a,
	0x83, 0x1f, 0x0c, 0xc4, 0x1c, 0x05, 0x2f, 0x20, 0x94, 0x24, 0x0a, 0xea, 0xdc, 0x70, 0x17, 0xe1,
	0x2b, 0x38, 0xe9, 0x28, 0xa7, 0xea, 0x3b, 0x75, 0x6e, 0xe2, 0x3e, 0xd6, 0xf7, 0x68, 0x25, 0xf4,
	0x3d, 0x81, 0x2d, 0xd2, 0xe1, 0x7d, 0xa1, 0x9b, 0xf1, 0x4d, 0xd3, 0x0b, 0x65, 0xec, 0x08, 0x98,
	0x8b, 0x74, 0x9e, 0x78, 0x27, 0xa8, 0x48, 0x43, 0xf3, 0x34, 0x5c, 0x34, 0xfb, 0x39, 0x84, 0xf8,
	0xc8, 0x2b, 0xbc, 0x86, 0x40, 0x6d, 0x5b, 0x72, 0x9b, 0x5f, 0xbe, 0x60, 0xe7, 0xe7, 0x6d, 0x4b,
	0xcc, 0x90, 0x0e, 0x75, 0x1d, 0x1e, 0xe9, 0xba, 0x84, 0x73, 0xfb, 0x2c, 0xb2, 0x23, 0x79, 0xed,
	0x1d, 0x13, 0x0b, 0x7d, 0x39, 0x10, 0xf9, 0x06, 0xfe, 0x77, 0xfc, 0x27, 0x5a, 0xdb, 0xf3, 0x5c,
	0x33, 0x76, 0xa8, 0xf8, 0x33, 0xef, 0x46, 0xff, 0xe2, 0x5d, 0xf8, 0x82, 0x77, 0x98, 0x80, 0x5f,
	0x12, 0xa5, 0x91, 0xc1, 0xf4, 0xe7, 0xd5, 0x07, 0x88, 0x8f, 0xdc, 0xc2, 0x31, 0x44, 0xb2, 0xcf,
	0x73, 0x92, 0x32, 0x19, 0xe0, 0x05, 0x60, 0x2f, 0x64, 0x5f, 0x96, 0x55, 0x5e, 0x91, 0x50, 0x59,
	0xd9, 0x8b, 0x42, 0x26, 0x1e, 0x4e, 0x20, 0xa6, 0x1f, 0x8a, 0x3a, 0xc1, 0xeb, 0xac, 0xe4, 0x55,
	0x9d, 0x0c, 0xaf, 0xde, 0xc1, 0xe4, 0x99, 0x78, 0x78, 0x02, 0x41, 0xd3, 0x92, 0x48, 0x06, 0x78,
	0x0a, 0xa3, 0xbc, 0x6e, 0x24, 0x25, 0x1e, 0x02, 0x84, 0x7d, 0xd1, 0x72, 0x45, 0xc9, 0xf0, 0x31,
	0x34, 0x7f, 0xee, 0xb7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xd2, 0xa7, 0xd1, 0xe9, 0x03,
	0x00, 0x00,
}
