syntax = "proto3";

package logs;

// Log is the main object in the file which represent the log entry in the
// log file.
message Log {
    int64 time = 1;

    oneof data {
        RouterState state = 2;
        Payment payment = 3;
        ChannelChange channel_change = 4;
        UserChange user_change = 5;
    }
}

// RouterState is a type of log entry which describes the state/view of the
// router local lightning network and number of free funds which exist under
// control router.
message RouterState {
    // Channels represent the local lightning network topology.
    repeated Channel channels = 1;

    // FreeBalance it is free number of funds under router managment which
    // could be used to lock them in the channels.
    uint64 free_balance = 2;

    // PendingBalance is the amount of funds which in the process of
    // being accepted by blockchain.
    uint64 pending_balance = 3;
}

// Channel is used as the building block in describing of the lightning
// network topology.
message Channel {
    string user_id = 1;
    string channel_id = 2;
    uint64 user_balance = 3;
    uint64 router_balance = 4;
    bool is_pending = 5;
}

// Payment represent the attempt of peer in the local lightning network to
// send the payment to some another peer in the network.
message Payment {
    PaymentStatus status = 1;

    string sender = 2;
    string receiver = 3;
    uint64 amount = 5;

    // Earned is the number of funds which router earned by making this payment.
    // In case of rebalncing router will pay the fee, for that reason this
    // number will be negative.
    int64 earned = 6;
}

enum PaymentStatus {
    // Null is used to catch that field wasn't initialised.
    status_null = 0;

    success = 1;

    // UnsufficientFunds means that router haven't posses/locked enough funds
    // with receiver user to route thouth the payment.
    unsufficient_funds = 2;

    // ExternalFail means that receiver failed to receive payment because of
    // the unknown to us reason.
    external_fail = 3;

    // UserLocalFail means that from user's side all channel are in
    // pending states or not exist at all, or number of funds from user side
    // is not enough.
    user_local_fail = 4;
}

message ChannelChange {
    ChannelChangeType type = 1;

    string user_id = 2;
    string channel_id = 3;

    uint64 user_balance = 4;
    uint64 router_balance = 5;

    // Fee which was taken by blockchain decentrilized computer /
    // mainers or some other form of smart contract manager.
    uint64 fee = 6;

    // Duration which was taken by blockchain decentrilized computer to apply
    // this change (open, close, update).
    int64 duration = 7;
}

// ChannelChangeType represent the type of action which were attempted to
// apply to the channel.
enum ChannelChangeType {
    // ChangeNull identifies the null state of channel change, so that
    // receiver could identify that some mistake has happened.
    change_null = 0;

    openning = 1;

    // Opened is used when this channel was just created, and haven't been in
    // local network before.
    opened = 2;

    // ...
    closing = 3;

    // Closed is used when number locked funds / balances of both channel
    // participant equal to zero.
    closed = 4;

    // ...
    updating = 5;

    // Updated is used when one of the participants decides to update its
    // channel balance.
    updated = 6;
}

// UserChange represent the change of user state.
message UserChange {
    string user_id = 1;

    // IsConnected denotes is this user connected to the hub with tcp/ip
    // connection. If yes, he/she is able to send and receive payments, if not
    // than not.
    bool is_connected = 2;
}