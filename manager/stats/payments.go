package stats

import (
	"github.com/bitlum/hub/lightning"
	"github.com/btcsuite/btcutil"
	"github.com/go-errors/errors"
	"github.com/montanaflynn/stats"
	"time"
)

type PaymentNodeStats struct {
	// AverageSentSat is the number of funds which were sens from
	// us to remote node, calculated over given period of time.
	// For example: average sent funds during the day, calculated over
	// week period.
	AverageSentSat btcutil.Amount

	// AverageReceivedForwardSat is the number of funds which were received
	// from this node generated by forwarding activity in the network, calculated
	// over given period of time.
	// For example: average received funds forward during the day,
	// calculated over week period.
	AverageReceivedForwardSat btcutil.Amount

	// AverageSentForwardSat is the number of funds which were sent
	// to this node generated by forwarding activity in the network.
	AverageSentForwardSat btcutil.Amount

	OverallSentSat            btcutil.Amount
	OverallReceivedForwardSat btcutil.Amount
	OverallSentForwardSat     btcutil.Amount

	// NumForwardSentPayments number of times we have sent forward payment to this node.
	NumForwardSentPayments int32

	// NumForwardReceivedPayments number of times we have received forward payment
	// from this node.
	NumForwardReceivedPayments int32

	// NumSentPayments number of times we have sent payment to this node.
	NumSentPayments int32
}

// calculateNodeStats calculate average day payment statistics activity between
// our node and other nodes calculated over the week, also aggregate stats
// about funds locked and locally and remotely with node,
// as well 95% percentile payment amount.
func calculatePaymentsStats(period string, payments []*lightning.Payment,
	forwardPayments []*lightning.ForwardPayment) (map[lightning.
NodeID]PaymentNodeStats, error) {

	day := int64(60 * 60 * 24)
	start := int64(0)
	end := int64(0)

	switch period {
	case "day":
		start = time.Now().Unix() - day
		end = time.Now().Unix()
	case "week":
		start = time.Now().Unix() - 7*day
		end = time.Now().Unix()
	case "month":
		start = time.Now().Unix() - 30*day
		end = time.Now().Unix()
	case "three month":
		start = time.Now().Unix() - 3*30*day
		end = time.Now().Unix()
	default:
		return nil, errors.Errorf("period(%v) not supported", period)
	}

	numDays := (end - start) / day
	nodeStats := make(map[lightning.NodeID]PaymentNodeStats)

	for _, payment := range payments {
		// Skip payment which are lies bong inspected period of time.
		if start > payment.UpdatedAt || end < payment.UpdatedAt {
			continue
		}

		if payment.Direction == lightning.Outgoing {
			stat := nodeStats[payment.Receiver]
			stat.OverallSentSat += payment.Amount
			stat.NumSentPayments += 1
			nodeStats[payment.Receiver] = stat
		} else if payment.Direction == lightning.Incoming {
			// In this case we un
		}
	}

	for _, payment := range forwardPayments {
		// Skip payment which are lies bong inspected period of time.
		if start > payment.Time || end < payment.Time {
			continue
		}

		stat := nodeStats[payment.FromNode]
		stat.OverallReceivedForwardSat += payment.IncomingAmount
		stat.NumForwardReceivedPayments += 1
		nodeStats[payment.FromNode] = stat

		stat = nodeStats[payment.ToNode]
		stat.OverallSentForwardSat += payment.OutgoingAmount
		stat.NumForwardSentPayments += 1
		nodeStats[payment.ToNode] = stat
	}

	// Calculate average send flow for one day.
	for nodeID, stat := range nodeStats {
		stat.AverageSentSat = btcutil.Amount(int64(stat.OverallSentSat) / numDays)
		stat.AverageReceivedForwardSat = btcutil.Amount(int64(stat.
			OverallReceivedForwardSat) / numDays)
		stat.AverageSentForwardSat = btcutil.Amount(int64(stat.
			OverallSentForwardSat) / numDays)
		nodeStats[nodeID] = stat
	}

	return nodeStats, nil
}

// getPercentilePaymentAmount returns payment amount which corresponds to the
// given percentile, which means that random amount taken from given amount
// stream will be with "percent" change lower than returned by this function
// amount.
func getPercentilePaymentAmount(percent float64,
	paymentsAmounts []int64) (int64, error) {

	paymentsAmountsF := make([]float64, len(paymentsAmounts))
	for _, amount := range paymentsAmounts {
		paymentsAmountsF = append(paymentsAmountsF, float64(amount))
	}

	data := stats.Float64Data(paymentsAmountsF)
	percentileAmount, err := stats.Percentile(data, percent)
	if err != nil {
		return 0, err
	}

	return int64(percentileAmount), nil
}
