// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hubrpc.proto

/*
Package hubrpc is a generated protocol buffer package.

It is generated from these files:
	hubrpc.proto

It has these top-level messages:
	UpdateLinkRequest
	UpdateLinkResponse
	SetPaymentFeeBaseRequest
	SetPaymentFeeBaseResponse
	SetPaymentFeeProportionalRequest
	SetPaymentFeeProportionalResponse
*/
package hubrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateLinkRequest struct {
	// Time of the last sync with state of the router.
	Time          uint64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	RouterBalance int64  `protobuf:"varint,4,opt,name=router_balance,json=routerBalance" json:"router_balance,omitempty"`
}

func (m *UpdateLinkRequest) Reset()                    { *m = UpdateLinkRequest{} }
func (m *UpdateLinkRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateLinkRequest) ProtoMessage()               {}
func (*UpdateLinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpdateLinkRequest) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *UpdateLinkRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateLinkRequest) GetRouterBalance() int64 {
	if m != nil {
		return m.RouterBalance
	}
	return 0
}

type UpdateLinkResponse struct {
}

func (m *UpdateLinkResponse) Reset()                    { *m = UpdateLinkResponse{} }
func (m *UpdateLinkResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateLinkResponse) ProtoMessage()               {}
func (*UpdateLinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SetPaymentFeeBaseRequest struct {
	// PaymentFeeBase number of milli units (i.e milli satoshis in
	// Bitcoin) which will be taken for every forwarding payment.
	PaymentFeeBase int64 `protobuf:"varint,1,opt,name=payment_fee_base,json=paymentFeeBase" json:"payment_fee_base,omitempty"`
}

func (m *SetPaymentFeeBaseRequest) Reset()                    { *m = SetPaymentFeeBaseRequest{} }
func (m *SetPaymentFeeBaseRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPaymentFeeBaseRequest) ProtoMessage()               {}
func (*SetPaymentFeeBaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetPaymentFeeBaseRequest) GetPaymentFeeBase() int64 {
	if m != nil {
		return m.PaymentFeeBase
	}
	return 0
}

type SetPaymentFeeBaseResponse struct {
}

func (m *SetPaymentFeeBaseResponse) Reset()                    { *m = SetPaymentFeeBaseResponse{} }
func (m *SetPaymentFeeBaseResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPaymentFeeBaseResponse) ProtoMessage()               {}
func (*SetPaymentFeeBaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SetPaymentFeeProportionalRequest struct {
	// PaymentFeeProportional number of milli units (i.e milli
	// satoshis in Bitcoin) which will be taken for every killounit of
	// payment amount.
	PaymentFeeProportional int64 `protobuf:"varint,1,opt,name=payment_fee_proportional,json=paymentFeeProportional" json:"payment_fee_proportional,omitempty"`
}

func (m *SetPaymentFeeProportionalRequest) Reset()         { *m = SetPaymentFeeProportionalRequest{} }
func (m *SetPaymentFeeProportionalRequest) String() string { return proto.CompactTextString(m) }
func (*SetPaymentFeeProportionalRequest) ProtoMessage()    {}
func (*SetPaymentFeeProportionalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *SetPaymentFeeProportionalRequest) GetPaymentFeeProportional() int64 {
	if m != nil {
		return m.PaymentFeeProportional
	}
	return 0
}

type SetPaymentFeeProportionalResponse struct {
}

func (m *SetPaymentFeeProportionalResponse) Reset()         { *m = SetPaymentFeeProportionalResponse{} }
func (m *SetPaymentFeeProportionalResponse) String() string { return proto.CompactTextString(m) }
func (*SetPaymentFeeProportionalResponse) ProtoMessage()    {}
func (*SetPaymentFeeProportionalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

func init() {
	proto.RegisterType((*UpdateLinkRequest)(nil), "hubrpc.UpdateLinkRequest")
	proto.RegisterType((*UpdateLinkResponse)(nil), "hubrpc.UpdateLinkResponse")
	proto.RegisterType((*SetPaymentFeeBaseRequest)(nil), "hubrpc.SetPaymentFeeBaseRequest")
	proto.RegisterType((*SetPaymentFeeBaseResponse)(nil), "hubrpc.SetPaymentFeeBaseResponse")
	proto.RegisterType((*SetPaymentFeeProportionalRequest)(nil), "hubrpc.SetPaymentFeeProportionalRequest")
	proto.RegisterType((*SetPaymentFeeProportionalResponse)(nil), "hubrpc.SetPaymentFeeProportionalResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	//
	// UpdateLink is used to update router link in accordance with givein
	// request. Link might just one channel, or might be the set of
	// channels betwwen user and router. This hook is used by third-parties
	// to put new equilibritum state.
	UpdateLink(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error)
	//
	// SetPaymentFeeBase sets base number of milli units (i.e milli satoshis in
	// Bitcoin) which will be taken for every forwarding payment.
	SetPaymentFeeBase(ctx context.Context, in *SetPaymentFeeBaseRequest, opts ...grpc.CallOption) (*SetPaymentFeeBaseResponse, error)
	//
	// SetPaymentFeeProportional sets the number of milli units (i.e milli
	// satoshis in Bitcoin) which will be taken for every killounit of
	// payment amount.
	SetPaymentFeeProportional(ctx context.Context, in *SetPaymentFeeProportionalRequest, opts ...grpc.CallOption) (*SetPaymentFeeProportionalResponse, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) UpdateLink(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error) {
	out := new(UpdateLinkResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Manager/UpdateLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetPaymentFeeBase(ctx context.Context, in *SetPaymentFeeBaseRequest, opts ...grpc.CallOption) (*SetPaymentFeeBaseResponse, error) {
	out := new(SetPaymentFeeBaseResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Manager/SetPaymentFeeBase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetPaymentFeeProportional(ctx context.Context, in *SetPaymentFeeProportionalRequest, opts ...grpc.CallOption) (*SetPaymentFeeProportionalResponse, error) {
	out := new(SetPaymentFeeProportionalResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Manager/SetPaymentFeeProportional", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manager service

type ManagerServer interface {
	//
	// UpdateLink is used to update router link in accordance with givein
	// request. Link might just one channel, or might be the set of
	// channels betwwen user and router. This hook is used by third-parties
	// to put new equilibritum state.
	UpdateLink(context.Context, *UpdateLinkRequest) (*UpdateLinkResponse, error)
	//
	// SetPaymentFeeBase sets base number of milli units (i.e milli satoshis in
	// Bitcoin) which will be taken for every forwarding payment.
	SetPaymentFeeBase(context.Context, *SetPaymentFeeBaseRequest) (*SetPaymentFeeBaseResponse, error)
	//
	// SetPaymentFeeProportional sets the number of milli units (i.e milli
	// satoshis in Bitcoin) which will be taken for every killounit of
	// payment amount.
	SetPaymentFeeProportional(context.Context, *SetPaymentFeeProportionalRequest) (*SetPaymentFeeProportionalResponse, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Manager/UpdateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateLink(ctx, req.(*UpdateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetPaymentFeeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPaymentFeeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetPaymentFeeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Manager/SetPaymentFeeBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetPaymentFeeBase(ctx, req.(*SetPaymentFeeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetPaymentFeeProportional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPaymentFeeProportionalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetPaymentFeeProportional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Manager/SetPaymentFeeProportional",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetPaymentFeeProportional(ctx, req.(*SetPaymentFeeProportionalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hubrpc.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLink",
			Handler:    _Manager_UpdateLink_Handler,
		},
		{
			MethodName: "SetPaymentFeeBase",
			Handler:    _Manager_SetPaymentFeeBase_Handler,
		},
		{
			MethodName: "SetPaymentFeeProportional",
			Handler:    _Manager_SetPaymentFeeProportional_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hubrpc.proto",
}

func init() { proto.RegisterFile("hubrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0x6d, 0x48, 0x71, 0xd0, 0x62, 0x07, 0xd1, 0x34, 0x5e, 0xd2, 0x88, 0x10, 0x2f, 0x3d,
	0xe8, 0xc5, 0x73, 0x15, 0x41, 0x50, 0x28, 0x11, 0xc1, 0x83, 0x10, 0x36, 0xcd, 0x58, 0x83, 0xed,
	0xee, 0xba, 0xbb, 0x39, 0xf8, 0x57, 0xfc, 0xb5, 0x62, 0x37, 0xc1, 0xd4, 0xc6, 0xe2, 0x6d, 0xe7,
	0xeb, 0xbd, 0x37, 0x6f, 0x16, 0x76, 0x5f, 0xcb, 0x4c, 0xc9, 0xd9, 0x58, 0x2a, 0x61, 0x04, 0x7a,
	0x36, 0x8a, 0xe6, 0x30, 0x78, 0x94, 0x39, 0x33, 0x74, 0x57, 0xf0, 0xb7, 0x84, 0xde, 0x4b, 0xd2,
	0x06, 0x11, 0x5c, 0x53, 0x2c, 0xc9, 0x77, 0x42, 0x27, 0x76, 0x93, 0xd5, 0x1b, 0x8f, 0xa0, 0x57,
	0x6a, 0x52, 0x69, 0x91, 0xfb, 0x9d, 0xd0, 0x89, 0x77, 0x12, 0xef, 0x3b, 0xbc, 0xcd, 0xf1, 0x14,
	0xfa, 0x4a, 0x94, 0x86, 0x54, 0x9a, 0xb1, 0x05, 0xe3, 0x33, 0xf2, 0xdd, 0xd0, 0x89, 0xbb, 0xc9,
	0x9e, 0xcd, 0x4e, 0x6c, 0x32, 0x3a, 0x00, 0x6c, 0x12, 0x69, 0x29, 0xb8, 0xa6, 0xe8, 0x1a, 0xfc,
	0x07, 0x32, 0x53, 0xf6, 0xb1, 0x24, 0x6e, 0x6e, 0x88, 0x26, 0x4c, 0x53, 0xad, 0x22, 0x86, 0x7d,
	0x69, 0x0b, 0xe9, 0x0b, 0x51, 0x9a, 0x31, 0x6d, 0x15, 0x75, 0x93, 0xbe, 0x5c, 0x1b, 0x88, 0x8e,
	0x61, 0xd8, 0x82, 0x52, 0x51, 0x3c, 0x43, 0xb8, 0x56, 0x9c, 0x2a, 0x21, 0x85, 0x32, 0x85, 0xe0,
	0x6c, 0x51, 0x53, 0x5d, 0x82, 0xdf, 0xa4, 0x92, 0x8d, 0x96, 0x8a, 0xf2, 0x50, 0xb6, 0x02, 0x44,
	0x27, 0x30, 0xda, 0x82, 0x6e, 0x25, 0x9c, 0x7f, 0x76, 0xa0, 0x77, 0xcf, 0x38, 0x9b, 0x93, 0xc2,
	0x2b, 0x80, 0x1f, 0x1f, 0x70, 0x38, 0xae, 0xae, 0xb2, 0x71, 0x84, 0x20, 0x68, 0x2b, 0x59, 0x40,
	0x7c, 0x82, 0xc1, 0xc6, 0xc2, 0x18, 0xd6, 0x03, 0x7f, 0x39, 0x1a, 0x8c, 0xb6, 0x74, 0x54, 0xc8,
	0xf2, 0x97, 0x95, 0xcd, 0x7d, 0x30, 0x6e, 0x9d, 0x6f, 0x31, 0x34, 0x38, 0xfb, 0x47, 0xa7, 0x65,
	0xcc, 0xbc, 0xd5, 0x87, 0xbc, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x59, 0x97, 0xf8, 0xbb, 0xa0,
	0x02, 0x00, 0x00,
}
