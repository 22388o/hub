// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hubrpc.proto

/*
Package hubrpc is a generated protocol buffer package.

It is generated from these files:
	hubrpc.proto

It has these top-level messages:
	UpdateLinkRequest
	UpdateLinkResponse
*/
package hubrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateLinkRequest struct {
	// Time of the last sync with state of the router.
	Time          uint64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	RouterBalance uint64 `protobuf:"varint,4,opt,name=router_balance,json=routerBalance" json:"router_balance,omitempty"`
}

func (m *UpdateLinkRequest) Reset()                    { *m = UpdateLinkRequest{} }
func (m *UpdateLinkRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateLinkRequest) ProtoMessage()               {}
func (*UpdateLinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpdateLinkRequest) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *UpdateLinkRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateLinkRequest) GetRouterBalance() uint64 {
	if m != nil {
		return m.RouterBalance
	}
	return 0
}

type UpdateLinkResponse struct {
}

func (m *UpdateLinkResponse) Reset()                    { *m = UpdateLinkResponse{} }
func (m *UpdateLinkResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateLinkResponse) ProtoMessage()               {}
func (*UpdateLinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*UpdateLinkRequest)(nil), "hubrpc.UpdateLinkRequest")
	proto.RegisterType((*UpdateLinkResponse)(nil), "hubrpc.UpdateLinkResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	//
	// UpdateLink is used to update router link in accordance with givein
	// request. Link might just one channel, or might be the set of
	// channels betwwen user and router. This hook is used by third-parties
	// to put new equilibritum state.
	UpdateLink(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) UpdateLink(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error) {
	out := new(UpdateLinkResponse)
	err := grpc.Invoke(ctx, "/hubrpc.Manager/UpdateLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manager service

type ManagerServer interface {
	//
	// UpdateLink is used to update router link in accordance with givein
	// request. Link might just one channel, or might be the set of
	// channels betwwen user and router. This hook is used by third-parties
	// to put new equilibritum state.
	UpdateLink(context.Context, *UpdateLinkRequest) (*UpdateLinkResponse, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubrpc.Manager/UpdateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateLink(ctx, req.(*UpdateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hubrpc.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLink",
			Handler:    _Manager_UpdateLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hubrpc.proto",
}

func init() { proto.RegisterFile("hubrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x28, 0x4d, 0x2a,
	0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd2, 0xb9, 0x04,
	0x43, 0x0b, 0x52, 0x12, 0x4b, 0x52, 0x7d, 0x32, 0xf3, 0xb2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x32, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82,
	0xc0, 0x6c, 0x21, 0x71, 0x2e, 0xf6, 0xd2, 0xe2, 0xd4, 0xa2, 0xf8, 0xcc, 0x14, 0x09, 0x26, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x36, 0x10, 0xd7, 0x33, 0x45, 0x48, 0x95, 0x8b, 0xaf, 0x28, 0xbf, 0xb4,
	0x24, 0xb5, 0x28, 0x3e, 0x29, 0x31, 0x27, 0x31, 0x2f, 0x39, 0x55, 0x82, 0x05, 0xac, 0x8d, 0x17,
	0x22, 0xea, 0x04, 0x11, 0x54, 0x12, 0xe1, 0x12, 0x42, 0xb6, 0xa8, 0xb8, 0x20, 0x3f, 0xaf, 0x38,
	0xd5, 0xc8, 0x8f, 0x8b, 0xdd, 0x37, 0x31, 0x2f, 0x31, 0x3d, 0xb5, 0x48, 0xc8, 0x99, 0x8b, 0x0b,
	0xa1, 0x40, 0x48, 0x52, 0x0f, 0xea, 0x5c, 0x0c, 0xd7, 0x49, 0x49, 0x61, 0x93, 0x82, 0x98, 0x97,
	0xc4, 0x06, 0xf6, 0x9d, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x43, 0x58, 0xe7, 0xc2, 0xed, 0x00,
	0x00, 0x00,
}
