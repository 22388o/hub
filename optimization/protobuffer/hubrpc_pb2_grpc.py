# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
import os
import sys

current_path = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.join(current_path, '../'))

import protobuffer.hubrpc_pb2 as hubrpc__pb2


class ManagerStub(object):
  """Manager grpc service is used as an entry point for external optimisation
  subsystem to send the equilibrium state.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.UpdateLink = channel.unary_unary(
        '/hubrpc.Manager/UpdateLink',
        request_serializer=hubrpc__pb2.UpdateLinkRequest.SerializeToString,
        response_deserializer=hubrpc__pb2.UpdateLinkResponse.FromString,
        )
    self.SetPaymentFeeBase = channel.unary_unary(
        '/hubrpc.Manager/SetPaymentFeeBase',
        request_serializer=hubrpc__pb2.SetPaymentFeeBaseRequest.SerializeToString,
        response_deserializer=hubrpc__pb2.SetPaymentFeeBaseResponse.FromString,
        )
    self.SetPaymentFeeProportional = channel.unary_unary(
        '/hubrpc.Manager/SetPaymentFeeProportional',
        request_serializer=hubrpc__pb2.SetPaymentFeeProportionalRequest.SerializeToString,
        response_deserializer=hubrpc__pb2.SetPaymentFeeProportionalResponse.FromString,
        )


class ManagerServicer(object):
  """Manager grpc service is used as an entry point for external optimisation
  subsystem to send the equilibrium state.
  """

  def UpdateLink(self, request, context):
    """
    UpdateLink is used to update router link in accordance with givein
    request. Link might just one channel, or might be the set of
    channels betwwen user and router. This hook is used by third-parties
    to put new equilibritum state.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetPaymentFeeBase(self, request, context):
    """
    SetPaymentFeeBase sets base number of milli units (i.e milli satoshis in
    Bitcoin) which will be taken for every forwarding payment.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetPaymentFeeProportional(self, request, context):
    """
    SetPaymentFeeProportional sets the number of milli units (i.e milli
    satoshis in Bitcoin) which will be taken for every killounit of
    payment amount.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'UpdateLink': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateLink,
          request_deserializer=hubrpc__pb2.UpdateLinkRequest.FromString,
          response_serializer=hubrpc__pb2.UpdateLinkResponse.SerializeToString,
      ),
      'SetPaymentFeeBase': grpc.unary_unary_rpc_method_handler(
          servicer.SetPaymentFeeBase,
          request_deserializer=hubrpc__pb2.SetPaymentFeeBaseRequest.FromString,
          response_serializer=hubrpc__pb2.SetPaymentFeeBaseResponse.SerializeToString,
      ),
      'SetPaymentFeeProportional': grpc.unary_unary_rpc_method_handler(
          servicer.SetPaymentFeeProportional,
          request_deserializer=hubrpc__pb2.SetPaymentFeeProportionalRequest.FromString,
          response_serializer=hubrpc__pb2.SetPaymentFeeProportionalResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hubrpc.Manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
