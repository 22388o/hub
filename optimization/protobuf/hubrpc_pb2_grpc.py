# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import protobuf.hubrpc_pb2 as hubrpc__pb2


class ManagerStub(object):
  """Manager grpc service is used as an entry point for external optimisation
  subsystem to send the equilibrium state.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.UpdateLink = channel.unary_unary(
        '/hubrpc.Manager/UpdateLink',
        request_serializer=hubrpc__pb2.UpdateLinkRequest.SerializeToString,
        response_deserializer=hubrpc__pb2.UpdateLinkResponse.FromString,
        )


class ManagerServicer(object):
  """Manager grpc service is used as an entry point for external optimisation
  subsystem to send the equilibrium state.
  """

  def UpdateLink(self, request, context):
    """
    UpdateLink is used to update router link in accordance with givein
    request. Link might just one channel, or might be the set of
    channels betwwen user and router. This hook is used by third-parties
    to put new equilibritum state.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'UpdateLink': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateLink,
          request_deserializer=hubrpc__pb2.UpdateLinkRequest.FromString,
          response_serializer=hubrpc__pb2.UpdateLinkResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hubrpc.Manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
