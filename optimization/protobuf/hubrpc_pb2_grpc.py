# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import protobuf.hubrpc_pb2 as hubrpc__pb2


class ManagerStub(object):
  """Manager grpc service is used as an entry point for external optimisation
  subsystem to send the equilibrium state.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetState = channel.unary_unary(
        '/hubrpc.Manager/SetState',
        request_serializer=hubrpc__pb2.SetStateRequest.SerializeToString,
        response_deserializer=hubrpc__pb2.SetStateResponse.FromString,
        )


class ManagerServicer(object):
  """Manager grpc service is used as an entry point for external optimisation
  subsystem to send the equilibrium state.
  """

  def SetState(self, request, context):
    """
    SetState is used to notify router about the fact that it should change
    his state in accordance with givein in request. This hook is used by
    third-parties to put new equilibritum state.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetState': grpc.unary_unary_rpc_method_handler(
          servicer.SetState,
          request_deserializer=hubrpc__pb2.SetStateRequest.FromString,
          response_serializer=hubrpc__pb2.SetStateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hubrpc.Manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
